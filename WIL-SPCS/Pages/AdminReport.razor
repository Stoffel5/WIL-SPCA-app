@page "/AdminReport"

<a href="/desktophome" class="home-btn">
    <img src="images/adminhome.png" alt="Home" class="home-icon" />
</a>

<h3 class="user-report-title">User Report</h3>
@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h4>Submitted Reports</h4>
<div class="reports-list">
    @if (reports.Any())
    {
        foreach (var report in reports)
        {
            <div class="report-item">
                <strong>Location:</strong> @report.Location <br />
                <strong>Description:</strong> @report.Description <br />
                <strong>Contact Info:</strong> @report.ContactInfo <br />
                <strong>Status:</strong>
                <span style="color:@GetStatusColor(report.Status)">
                    @report.Status
                </span> <br />
                <button class="view-btn" onclick="openPopup('@report.Location', '@report.Description', '@report.ContactInfo', '@report.Status')">View</button>
                <button class="btn btn-danger" @onclick="@(() => DeleteReport(report.ReportId))">Delete</button>
            </div>
        }
    }
    else
    {
        <p>No reports submitted yet.</p>
    }
</div>

<div id="popupModal" class="popup-modal" onclick="closePopupOutside(event)">
    <div class="popup-content">
        <span class="close-btn" onclick="closePopup()">&times;</span>
        <h4 id="popupTitle">Title</h4>
        <p id="popupText">Content</p>
    </div>
</div>

<script>
    function openPopup(location, description, contactInfo, status) {
        document.getElementById('popupTitle').innerText = 'Report Details';
        document.getElementById('popupText').innerHTML = `
            <strong>Location:</strong> ${location}<br />
            <strong>Description:</strong> ${description}<br />
            <strong>Contact Info:</strong> ${contactInfo}<br />
            <strong>Status:</strong> <span style="color: ${GetStatusColor(status)}">${status}</span>
        `;
        document.getElementById('popupModal').style.display = 'block';
    }

    function closePopup() {
        document.getElementById('popupModal').style.display = 'none';
    }

    function closePopupOutside(event) {
        if (event.target == document.getElementById('popupModal')) {
            closePopup();
        }
    }
</script>

@* <h4>Submitted Reports</h4>
    <div class="reports-list">
        
        @if (reports.Any())
        {
            foreach (var report in reports)
            {
                <div class="report-item">
                    <strong>Location:</strong> @report.location <br />
                    <strong>Description:</strong> @report.Description <br />
                    <strong>Contact Info:</strong> @report.ContactInfo <br />
                    <strong>Status:</strong>
                    <span style="color:@GetStatusColor(report.Status)">
                        @report.Status
                    </span> <br />
                <button class="view-btn" onclick="openPopup('Report', <strong>Location:</strong> @report.location <br /> 'At the SPCA, we provide a platform for ktact us!')">View</button>
                    <button class="btn btn-danger" @onclick="@(() => DeleteReport(report.ReportId))">Delete</button>
                </div>
            }
        }
        else
        {
            <p>No reports submitted yet.</p>
        }
    </div>

<div id="popupModal" class="popup-modal" onclick="closePopupOutside(event)">
    <div class="popup-content">
        <span class="close-btn" onclick="closePopup()">&times;</span>
        <h4 id="popupTitle">Title</h4>
        <p id="popupText">Content</p>
    </div>
</div> *@

@code {
    Report animalReport = new Report();
    List<Report> reports = new List<Report>();
    private bool isEditing = false;
    private string? errorMessage = null;
    private string? successMessage = null;
    private bool loading = false; 

    protected override async Task OnInitializedAsync()
    {
        await CheckAccess();
    }
    private async Task CheckAccess()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");

            if (string.IsNullOrWhiteSpace(token))
            {
                Navigation.NavigateTo("/login", true);
                return;
            }

            var userType = GetUserTypeFromToken(token);
            Console.WriteLine(userType);

            if (userType != "Admin")
            {
                Navigation.NavigateTo("/login", true);
                return;
            }
        }
        catch (Exception)
        {
            Navigation.NavigateTo("/login", true);
        }
    }
    private string GetUserTypeFromToken(string token)
    {
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);

        var userTypeClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "role" || c.Type == "UserType");
        return userTypeClaim?.Value ?? string.Empty;
    }

    private async Task HandleValidSubmit()
    {
        isEditing = false;
        await GetReports();
    }

    private async Task GetReports()
    {
        reports = await Http.GetFromJsonAsync<List<Report>>("https://spcaapi.azurewebsites.net/api/Report/GetReports");
        foreach (var rep in reports)
        {
            Console.WriteLine(rep.Location);
        }
    }

    private async Task DeleteReport(int reportId)
    {
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/Report?id=" + reportId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminReport", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Lost" => "red",
            "Wandering" => "orange",
            "Abused" => "darkred",
            "In Need of Care" => "green",
            _ => "black"
        };
    }

    public class Report
    {
        public int ReportId { get; set; }
        public string Location { get; set; }
        public string Description { get; set; }
        public string ContactInfo { get; set; }
        public string Status { get; set; }
    }
}


<style>
    .desktop-container {
        background: url('/images/background123.png') no-repeat center center;
        background-size: cover;
        padding: 20px;
        /* max-width: 1200px; */
        width: 100%;
        margin: auto;
        text-align: center;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }
    body {
        font-family: Arial, sans-serif;
        height: 100%;
        width: 100%;
        color: #333;
        background: url('/images/background123.png') no-repeat center center;
        background-size: cover;
    }

    .home-btn {
        display: inline-block;
        text-decoration: none;
        margin: 10px;
        width: 80px;
        height: 80px;
        background-color: #143963;
        border-radius: 50%;
        text-align: center;
        line-height: 80px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .home-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.3);
        }

    .home-icon {
        width: 60px;
        height: 60px;
        vertical-align: middle;
        display: inline-block;
    }

    .top {
        margin: 30px;
        text-align: center;
    }

    h4{
        text-align: center;
    }
    .user-report-title {
        color: #143963; /* Set the text color to green */
    }
    .report-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: #143963;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 20px;
        width: 80%;
        max-width: 600px;
    }
    button{
        background-color: #143963;
    }

    .submit-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
       
    }

    .reports-list {
        list-style-type: none; /* Remove bullet points from the list */
        padding: 0; /* Remove default padding */
        margin: 0; /* Remove default margin */
        width: 100%;
        align-content: center;
        text-align: center;
        justify-content: center;
        display: flex;
        row-gap: 5px;
        flex-wrap: wrap;
    }

    .report-item {
        background-color: #143963; /* Background color for event items */
        color: white;
        border: 1px solid #dee2e6; /* Optional: Border around event items */
        border-radius: 5px; /* Optional: Rounded corners */
        padding: 15px; /* Padding inside each event item */
        margin: 10px; /* Space between event items */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Optional: Shadow effect */
        transition: transform 0.2s; /* Optional: Smooth transition for hover effects */
        display: flex; /* Optional: Enable Flexbox for inner content */
        flex-direction: column; /* puts the info in the item underneath each other */
        width: calc(33.33% - 20px);

    }

    .report-item .button-container {
        display: flex; /* Enable Flexbox for button container */
        justify-content: center; /* Center buttons horizontally */
        margin-top: 10px; /* Space between text and buttons */
    }

    .report-item button {
        background-color: #1A4D7A;
        color: white;
        border-radius: 10px; /* Optional: Rounded corners */
        width: 200px;
        margin: auto;
        flex-direction: row;
        flex-wrap: wrap;
    }

        .event-item button:hover {
            transform: scale(1.05);
        }

    .event-item:hover {
        transform: scale(1.05); /* Optional: Slightly enlarge the item on hover */
    }

        .report-item:last-child {
            border-bottom: none;
        }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-top: 4px solid #007bff;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
    }

    .popup-modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popupTitle {
        font-size: 24px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 20px;
    }

    .popup-content {
        background-color: #143963;
        border-radius: 8px;
        padding: 30px;
        width: 80%;
        max-width: 600px;
        text-align: left;
        color: #fff;
        font-family: Arial, sans-serif;
        font-size: 16px;
        line-height: 1.6;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

        .popup-content h4 {
            font-size: 22px;
            font-weight: bold;
            margin-bottom: 20px;
            color: #fff;
        }

        .popup-content p {
            font-size: 16px;
            margin-bottom: 20px;
            color: #e0e0e0;
        }

        .popup-content ul {
            list-style-type: none;
            padding-left: 0;
            margin-bottom: 20px;
            color: #e0e0e0;
        }

            .popup-content ul li {
                margin-bottom: 10px;
            }

        .popup-content .close-btn {
            color: #fff;
            font-size: 24px;
            font-weight: bold;
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
        }

            .popup-content .close-btn:hover {
                color: #f1f1f1;
            }

</style>
