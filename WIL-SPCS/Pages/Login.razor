@page "/login"

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Login</PageTitle>
<div class="login-container">
    <div class="login-form">
        <h3 class="bold-text">Login</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username" class="bold-text">Username or Email</label>
                <InputText id="username" class="form-control rounded-input" @bind-Value="loginModel.Email" />
            </div>

            <div class="form-group">
                <label for="password" class="bold-text">Password</label>
                <InputText id="password" type="password" class="form-control rounded-input" @bind-Value="loginModel.Password" />
            </div>

            <button type="submit" class="btn btn-primary rounded-button bold-text">Login</button>
            @if(errorMessage != "")
            {
                <p>@errorMessage</p>
            }
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    string errorMessage = "";

    private async Task HandleValidSubmit()
    {
        errorMessage = "";
        var encodedEmail = Uri.EscapeDataString(loginModel.Email);
        var encodedPassword = Uri.EscapeDataString(loginModel.Password);
        var response = await Http.GetAsync($"https://spcaapi.azurewebsites.net/api/User/Login?email={encodedEmail}&password={encodedPassword}");

        if (response.IsSuccessStatusCode)
        {
            var loginData = await response.Content.ReadFromJsonAsync<LoginModel>();

            await LocalStorage.SetItemAsync("email", loginData.Email);
            await LocalStorage.SetItemAsync("userType", loginData.UserType);

            if(loginData.UserType == "Admin")
            {
                Navigation.NavigateTo("/desktophome");
            }
            else
            {
                Navigation.NavigateTo("/welcome");
            }
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorModel>();
            errorMessage = errorResponse.message;
        }
    }

    public class ErrorModel
    {
        public string message { get; set; }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Username or Email is required.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        public string UserType { get; set; }
    }
}

<style>
    .login-form {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1rem;
        width: 100%;
    }

    .rounded-input {
        border-radius: 15px;
        width: 100%;
    }

    .rounded-button {
        border-radius: 15px;
        width: 100%;
    }

    .bold-text {
        font-weight: bold;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #0056b3;
    }

    .btn {
        display: inline-block;
        font-weight: 400;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
    }
</style>
