@page "/login"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Page</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f4f7fa;
            background: url('/images/background123.png') no-repeat center center;
            background-size: cover;
        }

        .container {
            background-color: rgba(255, 255, 255, 0.9);
            padding: 40px;
            width: 100%;
            max-width: 400px;
            border-radius: 10px;
            box-shadow: 0px 10px 30px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
        }

        h1 {
            font-size: 28px;
            color: #143963;
            margin-bottom: 20px;
            text-align: center;
            font-weight: bold;
        }

        .form-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            color: #555;
            font-weight: 600;
        }

        input {
            width: 100%;
            padding: 12px;
            border: 2px solid #ccc;
            border-radius: 8px;
            font-size: 16px;
            transition: border 0.3s;
        }

            input:focus {
                border-color: #143963;
                outline: none;
            }

        .error {
            color: red;
            font-size: 12px;
            margin-top: 5px;
        }

        .button {
            background-color: #143963;
            color: #ffffff;
            padding: 14px;
            border-radius: 8px;
            font-size: 18px;
            border: none;
            cursor: pointer;
            transition: all 0.3s;
            width: 100%;
        }

            .button:hover {
                background-color: #ffffff;
                color: #143963;
                border: 2px solid #143963;
            }

        .forgot-password {
            text-align: center;
            margin-top: 15px;
        }

            .forgot-password a {
                color: #143963;
                text-decoration: underline;
                transition: color 0.3s;
            }

                .forgot-password a:hover {
                    color: #f44336;
                }
    </style>
</head>
<body>

    <div class="container">
        <h1>Login</h1>
        <div class="form-group">
            <label for="email">Email</label>
            <input type="email" @bind="email" id="email" required>
            <div id="emailError" class="error"></div>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <input type="password" @bind="password" id="password" required>
            <div id="passwordError" class="error"></div>
        </div>
        <button type="submit" @onclick="HandleValidSubmit" class="button">Login</button>
        <div class="forgot-password">
            <a href="/forgot-password">Forgot Password?</a>
        </div>
    </div>
</body>
@code {
    public string email = string.Empty;
    public string password = string.Empty;
    public string errorMessage = string.Empty;
    private async Task HandleValidSubmit()
    {
        errorMessage = "";
        var encodedEmail = Uri.EscapeDataString(email);
        var encodedPassword = Uri.EscapeDataString(password);
        var response = await Http.GetAsync($"https://spcaapi.azurewebsites.net/api/User/Login?email={encodedEmail}&password={encodedPassword}");
        if (response.IsSuccessStatusCode)
        {
            var loginData = await response.Content.ReadFromJsonAsync<LoginModel>();
            await LocalStorage.SetItemAsync("email", loginData.Email);
            await LocalStorage.SetItemAsync("userType", loginData.UserType);
            if (loginData.UserType == "Admin")
            {
                Navigation.NavigateTo("/desktophome");
            }
            else
            {
                Navigation.NavigateTo("/welcome");
            }
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorModel>();
            errorMessage = errorResponse.message;
        }
    }
    public class ErrorModel
    {
        public string message { get; set; }
    }
    private class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public string UserType { get; set; }
    }
}
</html>

