@page "/register"

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<PageTitle>Register</PageTitle>

<div class="registration-container">
    <div class="registration-form">
        <h3 class="bold-text">Register</h3>

        <EditForm Model="@registrationModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username" class="bold-text">Username or Email</label>
                <InputText id="username" class="form-control rounded-input" @bind-Value="registrationModel.Email" />
            </div>

            <div class="form-group">
                <label for="password" class="bold-text">Password</label>
                <InputText id="password" type="password" class="form-control rounded-input" @bind-Value="registrationModel.Password" />
            </div>

            <div class="form-group">
                <label for="confirmPassword" class="bold-text">Re-enter Password</label>
                <InputText id="confirmPassword" type="password" class="form-control rounded-input" @bind-Value="registrationModel.ConfirmPassword" />
            </div>

            <button type="submit" class="btn btn-primary rounded-button bold-text">Next</button>
            @if(message != null)
            {
                <p>@message</p>
            }
        </EditForm>
    </div>
</div>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();
    string message = "";

    private async Task HandleValidSubmit()
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(registrationModel.Email), "email");
        content.Add(new StringContent(registrationModel.Password), "password");

        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/User/Register", content);

        if (response.IsSuccessStatusCode)
        {
            message = "Account created";
            StateHasChanged();
        }
        else
        {
            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorModel>();
            message = errorResponse.message;
        }
    }
    public class ErrorModel
    {
        public string message { get; set; }
    }

    private class RegistrationModel
    {
        [Required(ErrorMessage = "Username or Email is required.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirmation Password is required.")]
        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }

        public string UserType { get; set; }
    }
}
