@page "/AdminMessages"

@inject NavigationManager Navigation

<PageTitle>Messages</PageTitle>

<button class="open-nav-btn" onclick="openNav()">☰ </button>
<!-- Side Navigation Bar -->
<div id="sideNavbar" class="side-navbar">
    <a href="javascript:void(0)" class="close-btn" onclick="closeNav()">×</a>
    <a href="/adminmessages" class="nav-link">Messages</a>
    <a href="/adminboardings" class="nav-link">Boardings</a>
    <a href="/adminvolunteers" class="nav-link">Volunteers</a>
    <a href="/admininventory" class="nav-link">Inventory</a>
    <a href="/adminevents" class="nav-link">Events</a>
    <!-- Add more links here as needed -->
</div>

<div class="messages-page">
    <div class="messages-inbox">
        <h2 class="message-title"><center><b>Inbox</b></center></h2>
        <div class="messages-users">
            @foreach (User users in users)
            {
                <div class="message" @onclick="() => changeChat(users.Username)">
                    <div class="message-header">
                        <img class="message-avatar" src="@users.UserImage" alt="Avatar" />
                        <div class="message-info">
                            <h4 class="message-sender">@users.Username</h4>
                        </div>
                    </div>
                    <p class="message-content">Test</p>
                </div>
            }
        </div>
    </div>
    <div class="messages-chat">
        <h2 class="message-title"><center><b>@currentUserChat</b></center></h2>
        <div class="chat-window">
            <div class="messages" id="messages">
                @foreach (UserMessage message in UserMessages)
                {
                    <div class="message">
                        <div class="message-header">
                            <img class="message-avatar" src="@message.User.UserImage" alt="Avatar" />
                            <div class="message-info">
                                <h4 class="message-sender">@message.User.Username</h4>
                                <span class="message-timestamp">@message.Time</span>
                            </div>
                        </div>
                        <p class="message-content">@message.Message</p>
                    </div>
                }
            </div>
            <div class="input-container">
                <input id="messageInput" placeholder="Type a message..."/>
                <button class="btn-send" id="sendButton">Send</button>
            </div>
        </div>
    </div>
</div>

@code {

    private List<UserMessage> messages = new List<UserMessage>();
    private List<User> users = new List<User>();
    private List<UserMessage> UserMessages = new List<UserMessage>();
    private string currentUserChat;

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
    private List<UserMessage> getUserMessages()
    {
        // Placeholder logic for event fetching
        // Replace with actual data fetching from database or API
        return new List<UserMessage>
        {
            new UserMessage { User = users[0], Message = "Description of Sample Message 1", Time = "12:00" },
            new UserMessage { User = users[1], Message = "Description of Sample Message 2", Time = "12:00"  }
        };
    }

    public class UserMessage
    {
        public User User { get; set; }
        public string Message { get; set; }
        public string Time { get; set; }
    }
    private List<User> getUsers()
    {
        // Placeholder logic for event fetching
        // Replace with actual data fetching from database or API
        return new List<User>
        {
            new User { Username = "Kimberly", UserImage = "./css/SPCALOGO.jpg" },
            new User { Username = "Jada", UserImage = "./css/SPCALOGO.jpg" }
        };
    }

    protected override void OnInitialized()
    {
        // Initial load of events based on the default date
        LoadUsers();
    }

    private void LoadUsers()
    {
        users = getUsers();
        messages = getUserMessages();
        UserMessages.Clear();
        changeChat(users[0].Username);
        currentUserChat = users[0].Username;
    }

    public class User
    {
        public string Username { get; set; }
        public string UserImage { get; set; }
    }
    private void changeChat(string username)
    {
        UserMessages.Clear();
        currentUserChat = username;
        foreach (UserMessage message in messages)
        {
            if(message.User.Username == username)
            {
                UserMessages.Add(message);
            }
        }
    }
}
<style>
    body{
        color: black;
    }
    .messages-page{
        position: absolute;
        width: 97vw;
        height: 90vh;
        display: flex;
        background-color: white;
    }

    .messages-users {
        flex: 1;
        height: 90%;
        padding: 10px;
        border-bottom: 1px solid #ddd;
        overflow-y: auto;
    }
    .message {
        width: 100%;
    }
    .messages-chat{
        width: 60%;
        border: 1px solid black;
    }

    .messages-inbox {
        width: 40%;
        border: 1px solid black;
    }
    .messages-table{
        width: 100%;
    }

    .messages-inbox-items{
        width: 40%;
        border-bottom: 1px solid black;
    }

    .messages-chat-heading{
        border-bottom: 1px solid black;
    }

    .chat-window {
        height: 95%;
        padding: 10px;
        flex-direction: column;
    }

    .message-title{
        padding:5px;
        border-bottom: 1px solid black;
    }
    .messages {
        flex: 1;
        height: 90%;
        padding: 10px;
        border-bottom: 1px solid #ddd;
        overflow-y: auto;
        border: 1px solid black;
    }

    input {
        width: 80%;
        height: 30px;
        margin: 10px;
    }

    .btn-send {
        margin: 10px;
        width: 15%;
    }

    .input-container {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }

    .message {
        border-bottom: 1px solid #ddd;
        padding: 10px;
        display: flex;
        flex-direction: column;
    }

    .message-header {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
    }

    .message-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .message-info {
        display: flex;
        flex-direction: column;
    }

    .message-sender {
        margin: 0;
        font-weight: bold;
    }

    .message-timestamp {
        font-size: 0.8em;
        color: #A1A1A1;
    }

    .message-content {
        margin: 0;
    }

    .open-nav-btn {
        margin-bottom: 10px;
    }
    /* Side Navbar Styles */
    .side-navbar {
        height: 100%;
        width: 250px;
        position: fixed;
        top: 0;
        left: -250px; /* Initially hidden */
        background-color: #007BFF; /* Blue background for navbar */
        color: white;
        overflow-x: hidden;
        transition: 0.3s; /* Smooth transition for opening and closing */
        padding-top: 60px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
        z-index: 100;
    }

        .side-navbar .nav-link {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 1.2em;
            color: white;
            display: block;
            transition: 0.3s;
        }

            .side-navbar .nav-link:hover {
                background-color: #0056b3; /* Darker blue for hover effect */
            }

        .side-navbar .close-btn {
            position: absolute;
            top: 10px;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

        /* Show the side navbar when it is active */
        .side-navbar.active {
            left: 0;
        }
</style>

<script>
    function openNav() {
        document.getElementById("sideNavbar").classList.add("active");
    }

    function closeNav() {
        document.getElementById("sideNavbar").classList.remove("active");
    }
</script>
