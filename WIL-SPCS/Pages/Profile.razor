@page "/profile"

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Profile</title>

    <div id="sideNavbar" class="side-navbar">

        <div id="arrow" class="arrow-icon">►</div>

        <a href="/information" class="nav-link" aria-label="Navigate to Information">
            <img src="images/info2.png" alt="Information Icon" class="nav-icon">
            <span class="nav-text">Information</span>
        </a>
        <a href="/profile" class="nav-link" aria-label="Navigate to Profile">
            <img src="images/profile2.png" alt="Profile Icon" class="nav-icon">
            <span class="nav-text">Profile</span>
        </a>
        <a href="/gallery" class="nav-link" aria-label="Navigate to Gallery">
            <img src="images/gallery2.png" alt="Gallery Icon" class="nav-icon">
            <span class="nav-text">Gallery</span>
        </a>
        <a href="/events" class="nav-link" aria-label="Navigate to Events">
            <img src="images/calender2.png" alt="Events Icon" class="nav-icon">
            <span class="nav-text">Events</span>
        </a>
        <a href="/userchat" class="nav-link" aria-label="Navigate to Chat Page">
            <img src="images/chat2.png" alt="Chat Icon" class="nav-icon">
            <span class="nav-text">Chat with Us</span>
        </a>
        <a href="/Welcome" class="nav-link" aria-label="Navigate to Home">
            <img src="images/home2.png" alt="Home Icon" class="nav-icon">
            <span class="nav-text">Home</span>
        </a>
        <a href="/userReport" class="nav-link" aria-label="Navigate to UserReport">
            <img src="images/report2.png" alt="Report Icon" class="nav-icon">
            <span class="nav-text">Report</span>
        </a>
    </div>

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f0f2f5;
            min-height: 100vh;
            color: #143963;
            background: url('/images/background123.png') no-repeat center center;
            background-size: cover;
        }

        .profile-container {
            background-color: #ffffff;
            border-radius: 8px;
            max-width: 700px;
            width: 100%;
            padding: 30px;
            box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
        }

        .profile-header {
            text-align: center;
            margin-bottom: 20px;
        }

            .profile-header h2 {
                font-size: 28px;
                color: #143963;
            }

        .profile-picture {
            position: relative;
            margin: 0 auto 20px;
            width: 120px;
            height: 120px;
            border-radius: 50%;
            overflow: hidden;
            border: 4px solid #143963;
        }

            .profile-picture img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .change-photo {
            display: block;
            text-align: center;
            color: #143963;
            cursor: pointer;
            font-size: 14px;
            margin-top: 10px;
        }

        .profile-form label {
            font-weight: bold;
            color: #143963;
            display: block;
            margin-bottom: 5px;
        }

        .profile-form input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 14px;
            color: #143963;
            margin-bottom: 15px;
            background-color: #f0f2f5;
        }

        .form-group {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }

        .form-group-half {
            flex: 1;
        }

        .form-actions {
            text-align: center;
            margin-top: 20px;
        }

            .form-actions button {
                background-color: #143963;
                color: #ffffff;
                padding: 12px 24px;
                border: none;
                border-radius: 4px;
                font-size: 16px;
                cursor: pointer;
                margin: 0 10px;
            }

                .form-actions button:hover {
                    background-color: #0f2b52;
                }

        .profile-form input[disabled] {
            background-color: #eaeaea;
            cursor: not-allowed;
        }

        .side-navbar {
            height: 100%;
            width: 60px;
            position: fixed;
            top: 0;
            left: 0;
            background-color: #143963;
            overflow-x: hidden;
            transition: width 0.3s ease;
            padding-top: 60px;
            z-index: 100;
            border-right: 2px solid #ffffff;
        }

            .side-navbar:hover {
                width: 250px;
            }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            font-size: 1.2em;
            color: #e0f7fa;
            transition: background-color 0.3s ease;
            text-decoration: none;
        }

            .nav-link:hover {
                background-color: #4775A9;
                color: #ffffff;
            }

        .nav-icon {
            width: 24px;
            height: 24px;
            margin-right: 15px;
            transition: margin-right 0.3s ease;
        }

        .arrow-icon {
            font-size: 16px;
            color: #ffffff;
            text-align: center;
            margin-bottom: 10px;
            display: block;
            transform: rotate(0deg);
            transition: opacity 0.3s ease;
        }

        .side-navbar:hover .arrow-icon {
            opacity: 0;
        }

        .side-navbar:hover .nav-icon {
            margin-right: 10px;
        }

        .nav-text {
            display: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .side-navbar:hover .nav-text {
            display: inline;
            opacity: 1;
        }


        .bottom-nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            width: 100%;
            height: 60px;
            background-color: #143963;
            box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);
            display: none;
            justify-content: space-around;
            align-items: center;
            z-index: 1000;
        }

        .nav-item {
            flex: 1;
            text-align: center;
            transition: transform 0.3s ease, background-color 0.3s ease;
            padding: 5px;
        }

            .nav-item:hover {
                background-color: #f0f0f0;
                transform: scale(1.1);
                border-radius: 10px;
            }

        @@media screen and (max-width: 768px) {
            .side-navbar {
                display: none;
            }

            .main-content {
                margin-left: 0;
            }

            .bottom-nav {
                display: flex;
            }
        }

        @@media screen and (min-width: 769px) {
            .bottom-nav {
                display: none;
            }
        }
    </style>
</head>
<body>
    <div class="profile-container">
        <div class="profile-header">
            <h2>@user.FirstName @user.LastName's Profile</h2>
        </div>

        <div class="profile-picture">
            @if (user.ProfilePicture == null)
            {
                <img src="images/logo.png" alt="Profile Picture" id="profilePic">
            }
            @if (user.ProfilePicture != null)
            {
                <img src="@user.ProfilePicture" alt="Profile Picture" id="profilePic">
            }
        </div>
        <InputFile id="image" OnChange="HandleFileSelected" class="form-input"></InputFile>

        <form class="profile-form" id="profileForm">
            <div class="form-group">
                <div class="form-group-half">
                    <label for="firstName">First Name</label>
                    <input type="text" id="firstName" @bind="firstname" placeholder="@user.FirstName">
                </div>
                <div class="form-group-half">
                    <label for="lastName">Last Name</label>
                    <input type="text" id="lastName" @bind="lastname" placeholder="@user.LastName">
                </div>
            </div>

            <div class="form-group">
                <div class="form-group-half">
                    <label for="email">Email</label>
                    <input type="email" id="email" placeholder="@user.UserEmail" disabled>
                </div>
                <div class="form-group-half">
                    <label for="phone">Phone Number</label>
                    <input type="tel" id="phone" @bind="phonenumber" placeholder="@user.PhoneNumber">
                </div>
            </div>

            <div class="form-group">
                <div class="form-group-half">
                    <label for="address">Address</label>
                    <input type="text" id="address" @bind="address" placeholder="@user.Address">
                </div>
                <div class="form-group-half">
                    <label for="city">City</label>
                    <input type="text" id="city" @bind="city" placeholder="@user.City">
                </div>
            </div>
            <span style="color: red">@addError</span>
            <div class="form-actions">
                <button type="button" @onclick="EditUser">Save Changes</button>
                <button type="button" @onclick="SignOut">Logout</button>
            </div>
        </form>
    </div>

    <div class="bottom-nav">
        <a href="/information" class="nav-item" aria-label="Information"<img src="images/info2.png" alt="Information" class="nav-icon"></a>
        <a href="/profile" class="nav-item" aria-label="Profile"> <img src="images/profile2.png" alt="Profile" class="nav-icon"></a>
        <a href="/gallery" class="nav-item" aria-label="Gallery"<img src="images/gallery2.png" alt="Gallery" class="nav-icon"></a>
        <a href="/events" class="nav-item" aria-label="Events"<img src="images/calender2.png" alt="Events" class="nav-icon"></a>
        <a href="/userchat" class="nav-item" aria-label="Chat with Us"> <img src="images/chat2.png" alt="Chat" class="nav-icon"> </a>
        <a href="/Welcome" class="nav-link" aria-label="Navigate to Home"><img src="images/home2.png" alt="Home Icon" class="nav-icon"> </a>
        <a href="/userReport" class="nav-link" aria-label="Navigate to UserReport"> <img src="images/report2.png" alt="Report Icon" class="nav-icon"> </a>
    </div>
</body>
@code{
    public class User
    {
        public string UserEmail { get; set; }
        public string UserType { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string PhoneNumber { get; set; }
        public string City { get; set; }
        public string Address { get; set; }
        public string ProfilePicture { get; set; }
    }
    private IBrowserFile selectedFile;
    private User user = new User();
    public string email = string.Empty;
    public string firstname = string.Empty;
    public string lastname = string.Empty;
    public string phonenumber = string.Empty;
    public string city = string.Empty;
    public string address = string.Empty;
    string addError = string.Empty;
    bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await CheckAccess();
        isLoading = false;
    }
    private async Task CheckAccess()
    {
        email = await LocalStorage.GetItemAsync<string>("email");

        if (string.IsNullOrWhiteSpace(email))
        {
            Navigation.NavigateTo("/login", true);
            return;
        }

        var response = await Http.GetAsync($"https://spcaapi.azurewebsites.net/api/User/CheckUserAccess/{email}");

        if (response.IsSuccessStatusCode)
        {
            // Proceed to fetch user details
            await GetUsers();
        }
        else
        {
            // Navigate to login page if unauthorized
            Navigation.NavigateTo("/login", true);
        }
    }
    private async Task GetUsers()
    {
        /*
        Code Attribution
        Title: GET Request to API with Blazor/C#
        Author: ZetBit
        Link: https://www.youtube.com/watch?v=SjhzOauYC80
        Usage: Used to make get request in blazer
        */
        email = await LocalStorage.GetItemAsync<string>("email");
        user = await Http.GetFromJsonAsync<User>("https://spcaapi.azurewebsites.net/api/User/GetInfo/" + email);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            addError = "Image/Video Required";
        }
        else
        {
            selectedFile = e.File;
            if (selectedFile.Size > 5 * 1024 * 1024)
            {
                addError = "File to large";
            }
            else
            {
                addError = string.Empty;
                using (var stream = selectedFile.OpenReadStream(5 * 1024 * 1024))
                {
                    var buffer = new byte[selectedFile.Size];
                    await stream.ReadAsync(buffer, 0, (int)selectedFile.Size);
                }
            }
        }
    }

    private async Task EditUser()
    {
        var encodedEmail = Uri.EscapeDataString(user.UserEmail);
        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(email), "UserEmail");
        content.Add(new StringContent(firstname), "Firstname");
        content.Add(new StringContent(lastname), "Lastname");
        content.Add(new StringContent(phonenumber), "PhoneNumber");
        content.Add(new StringContent(city), "City");
        content.Add(new StringContent(address), "Address");

        Console.WriteLine();

        // add file to request
        if (selectedFile != null)
        {
            var allowedFileTypes = new List<string> { "image/jpeg", "image/png", "image/gif", "video/mp4", "video/avi", "video/mkv" };
            if (!allowedFileTypes.Contains(selectedFile.ContentType))
            {
                addError = "Only images (JPEG, PNG, GIF) and videos (MP4, AVI, MKV) are allowed.";
                return;
            }
            var streamContent = new StreamContent(selectedFile.OpenReadStream(5 * 1024 * 1024));
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(streamContent, "file", selectedFile.Name);
        }
        else
        {
            content.Add(new StringContent(""), "file");
        }

        // make request
        var response = await Http.PatchAsync($"https://spcaapi.azurewebsites.net/api/User/Update/" + encodedEmail, content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/profile", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error editing user: " + response.ReasonPhrase);
        }
    }
    private async Task SignOut(MouseEventArgs e)
    {
        await LocalStorage.SetItemAsync("email", "");
        await LocalStorage.SetItemAsync("userType", "");
        Navigation.NavigateTo("/", true);
    }
}
</html>
