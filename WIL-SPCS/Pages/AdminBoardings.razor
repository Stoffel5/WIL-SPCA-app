@page "/AdminBoardings"

@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Boarding Management</PageTitle>

<a href="/desktophome" class="home-btn">
    <img src="images/adminhome.png" alt="Home" class="home-icon" />
</a>

@if (AddBoardingHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Add Boarding</h3>
            <div class="form-group">
                <label for="PetName" class="bold-text">Pet Name</label>
                <input id="PetName" class="form-control rounded-input" @bind="petName" />
            </div>
            <div class="form-group">
                <label for="Breed" class="bold-text">Breed</label>
                <input id="Breed" class="form-control rounded-input" @bind="breed" />
            </div>
            <div class="form-group">
                <label for="StartDate" class="bold-text">Start Date</label>
                <input id="StartDate" type="date" class="form-control rounded-input" @bind="startDate" />
            </div>
            <div class="form-group">
                <label for="EndDate" class="bold-text">End Date</label>
                <input id="EndDate" type="date" class="form-control rounded-input" @bind="endDate" />
            </div>
            <div class="form-group">
                <label for="OwnerName" class="bold-text">Owner Name</label>
                <input id="OwnerName" class="form-control rounded-input" @bind="ownerName" />
            </div>
            <div class="form-group">
                <label for="OwnerEmail" class="bold-text">Owner Email</label>
                <input id="OwnerEmail" class="form-control rounded-input" @bind="ownerEmail" />
            </div>
            <button type="submit" @onclick="AddBoarding" class="btn btn-primary rounded-button bold-text">Add</button>
            <button type="submit" @onclick="Cancel" class="btn btnx btn-danger btn-submit">Cancel</button>
        </div>
    </div>
}

@if (EditBoardingHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Edit Boarding</h3>
            <div class="form-group">
                <label for="EditPetName" class="bold-text">Pet Name</label>
                <input id="EditPetName" class="form-control rounded-input" @bind="editPetName" />
            </div>
            <div class="form-group">
                <label for="EditBreed" class="bold-text">Breed</label>
                <input id="EditBreed" class="form-control rounded-input" @bind="editBreed" />
            </div>
            <div class="form-group">
                <label for="EditStartDate" class="bold-text">Start Date</label>
                <input id="EditStartDate" type="date" class="form-control rounded-input" @bind="editStartDate" />
            </div>
            <div class="form-group">
                <label for="EditEndDate" class="bold-text">End Date</label>
                <input id="EditEndDate" type="date" class="form-control rounded-input" @bind="editEndDate" />
            </div>
            <div class="form-group">
                <label for="EditOwnerName" class="bold-text">Owner Name</label>
                <input id="EditOwnerName" class="form-control rounded-input" @bind="editOwnerName" />
            </div>
            <div class="form-group">
                <label for="EditOwnerEmail" class="bold-text">Owner Email</label>
                <input id="EditOwnerEmail" class="form-control rounded-input" @bind="editOwnerEmail" />
            </div>
            <button type="submit" @onclick="EditBoarding" class="btn btn-primary rounded-button bold-text">Edit</button>
            <button type="submit" @onclick="Cancel" class="btn btnx btn-danger btn-submit">Cancel</button>
        </div>
    </div>
}

@if (DeleteBoardingHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Delete Boarding</h3>
            <p><b>Are you sure you want to delete this Boarding?</b></p>
            <button type="submit" @onclick="DeleteBoarding" class="btn btn-primary rounded-button bold-text">Delete</button>
            <button type="submit" @onclick="Cancel" class="btn btnx btn-danger btn-submit">Cancel</button>
        </div>
    </div>
}

@if (!AddBoardingHtml && !EditBoardingHtml && !DeleteBoardingHtml)
{   
    <div class="top">
        <div>
            <center><h3 class="page-title">Boarding</h3></center>               
            <center>
            <input type="text" @oninput="search" placeholder="Search..." class="desktop-search-bar">   
            </center>
            <center><button class="btn btnx btn-primary rounded-button bold-text" @onclick="AddBoardingForm">Add Boarding</button></center>
        </div>
    </div>
    <div style="padding-left: 16px"></div>

    <div class="tbl-pets">
        <table class="table-style">
            <thead>
                <tr>
                    <th>Pet Name</th>
                    <th>Breed</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Owner Name</th>
                    <th>Owner Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var request in boardingRequests)
                {
                    <tr>
                        <td>@request.PetName</td>
                        <td>@request.Breed</td>
                        <td>@request.StartDate</td>
                        <td>@request.EndDate</td>
                        <td>@request.OwnerName</td>
                        <td>@request.OwnerEmail</td>
                        <td>
                            <center>
                                <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => EditBoardingForm(request)">Edit</button>
                                <button class="btn btnx btn-danger rounded-button bold-text" @onclick="() => DeleteBoardingForm(request)">Delete</button>
                            </center>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    bool AddBoardingHtml = false;
    bool EditBoardingHtml = false;
    bool DeleteBoardingHtml = false;

    string ownerName = string.Empty;
    string ownerEmail = string.Empty;
    string petName = string.Empty;
    string breed = string.Empty;
    DateOnly startDate = DateOnly.FromDateTime(DateTime.Today);
    DateOnly endDate = DateOnly.FromDateTime(DateTime.Today);

    string editOwnerName = string.Empty;
    string editOwnerEmail = string.Empty;
    string editPetName = string.Empty;
    string editBreed = string.Empty;
    DateOnly editStartDate = DateOnly.FromDateTime(DateTime.Today);
    DateOnly editEndDate = DateOnly.FromDateTime(DateTime.Today);
    private string? errorMessage = null;
    string userType;

    private List<BoardingRequest> boardingRequests = new List<BoardingRequest>();
    private List<BoardingRequest> searchRequests = new List<BoardingRequest>();
    private BoardingRequest currentBoardingRequest = new BoardingRequest();

    protected override async Task OnInitializedAsync()
    {
        
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        // Load events based on the selected date (placeholder logic)
        boardingRequests = await Http.GetFromJsonAsync<List<BoardingRequest>>("https://spcaapi.azurewebsites.net/api/Boarding/GetBoardingRequests");
        searchRequests = boardingRequests;
    }
    private void AddBoardingForm(MouseEventArgs e)
    {
        AddBoardingHtml = true;
        StateHasChanged();
    }
    private void EditBoardingForm(BoardingRequest request)
    {
        EditBoardingHtml = true;
        StateHasChanged();
    }
    private void DeleteBoardingForm(BoardingRequest request)
    {
        currentBoardingRequest = request;
        DeleteBoardingHtml = true;
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Navigation.NavigateTo("/welcome");
    }
    private async Task AddBoarding(MouseEventArgs e)
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(ownerName), "OwnerName");
        content.Add(new StringContent(breed), "Breed");
        content.Add(new StringContent(petName), "PetName");
        content.Add(new StringContent(ownerEmail), "OwnerEmail");
        content.Add(new StringContent(startDate.ToString()), "StartDate");
        content.Add(new StringContent(endDate.ToString()), "EndDate");
        // Post report to external API
        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/Boarding", content);
        if (response.IsSuccessStatusCode)
        {
            // Reset the form and state after submission
            Navigation.NavigateTo("/AdminBoardings", true);
            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to submit boarding to API";
        }
        AddBoardingHtml = false;
        StateHasChanged();
    }
    private async Task EditBoarding(MouseEventArgs e)
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(editOwnerName), "OwnerName");
        content.Add(new StringContent(editBreed), "Breed");
        content.Add(new StringContent(editPetName), "PetName");
        content.Add(new StringContent(editOwnerEmail), "OwnerEmail");
        content.Add(new StringContent(editStartDate.ToString()), "StartDate");
        content.Add(new StringContent(editEndDate.ToString()), "EndDate");

        // make request
        var response = await Http.PutAsync($"https://spcaapi.azurewebsites.net/api/events/UpdateEvent/" + currentBoardingRequest.requestId, content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminBoardings", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
        StateHasChanged();
        EditBoardingHtml = false;
        StateHasChanged();
    }

    private void Cancel(MouseEventArgs e)
    {
        AddBoardingHtml = false;
        EditBoardingHtml = false;
        DeleteBoardingHtml = false;
        StateHasChanged();
    }

    private async Task DeleteBoarding(MouseEventArgs e)
    {
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/Boarding/" + currentBoardingRequest.requestId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminBoardings", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
        DeleteBoardingHtml = false;
        StateHasChanged();
    }
    public class BoardingRequest
    {
        public string PetName { get; set; }
        public string Breed { get; set; }
        public string StartDate { get; set; }
        public string EndDate { get; set; }
        public string OwnerName { get; set; }
        public string OwnerEmail { get; set; }
        public string requestId { get; set; }
    }
    private void search(ChangeEventArgs e)
    {
        var searchText = e.Value.ToString()?.Trim().ToLower() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchText))
        {
            boardingRequests = searchRequests.Where(boarding => boarding.PetName.ToLower().Contains(searchText)).ToList();
        }
        else
        {
            boardingRequests = new List<BoardingRequest>(searchRequests);
        }
        StateHasChanged();
    }
}

<style>

    body {
        font-family: Arial, sans-serif;        
        color: #333;
        background: url('/images/background123.png') no-repeat center center;
        background-size: cover;
    }

   
    .top {
        margin: 30px;
        text-align: center;
    }

    .home-btn {
        display: inline-block;
        text-decoration: none;
        margin: 10px;
        width: 80px;
        height: 80px;
        background-color: #143963;
        border-radius: 50%;
        text-align: center;
        line-height: 80px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        .home-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.3);
        }

    .home-icon {
        width: 60px;
        height: 60px;
        vertical-align: middle;
        display: inline-block;
    }

    .page-title {
        color: #143963;
        margin-bottom: 20px;
        font-size: 60px;
    }

    .desktop-search-bar {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 80%; 
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); 
    }


    .tbl-pets {
        padding: 0 16px;
    }

    .table-style {
        width: 100%;
        border-collapse: collapse;
        border-radius: 12px;
        margin-bottom: 20px;
        overflow: hidden;
    }

    th, td {
        padding: 10px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #143963;
        color: white;
    }

    .form-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .form-card {
        background: #143963;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 300px;
        text-align: center;
    }

    .form-title {
        margin-bottom: 20px;
        color: #ffffff;
    }

    .form-group {
        margin-bottom: 15px;
        width: 100%;
    }

    .form-label {
        margin-bottom: 5px;
        font-weight: bold;
        color: white;
    }

    .form-input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .btnx {
        margin-top: 5px;
        margin-bottom: 5px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 50%;
        font-size: 16px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .btn-primary {
        background-color: #143963;
        color: white;
        border: 1px solid #143963;
    }

        .btn-primary:hover {
            background-color: white;
            color: #143963;
            border-color: #143963;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: 1px solid #dc3545;
        margin-right: 5px;
    }

        .btn-danger:hover {
            border-color: #8a1212;
            color: #fff;
        }

    .btn-edit {
        background-color: #28a745;
        color: white;
        border: 1px solid #28a745;
        margin-right: 5px;
    }

        .btn-edit:hover {
            background-color: #218838;
            color: white;
        }

    .btn-add {
        background-color: #ffffff;
        color: #143963;
        border: 1px solid #143963;
        margin-top: 10px;
    }

        .btn-add:hover {
            background-color: #e0e0e0;
            color: #143963;
        }

    .desktop-search-bar {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 80%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .search-button {
        padding: 8px 15px;
        margin-left: 10px;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        background-color: #143963;
        color: #fff;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .search-button:hover {
            background-color: #fff;
            color: #143963;
        }
</style>