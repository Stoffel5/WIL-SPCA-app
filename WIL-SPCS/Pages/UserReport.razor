@page "/userReport"
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<h3 class="report-title">Report</h3>

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<div id="sideNavbar" class="side-navbar">

    <div id="arrow" class="arrow-icon">►</div>

    <a href="/information" class="nav-link" aria-label="Navigate to Information">
        <img src="images/info2.png" alt="Information Icon" class="nav-icon">
        <span class="nav-text">Information</span>
    </a>
    <a href="/profile" class="nav-link" aria-label="Navigate to Profile">
        <img src="images/profile2.png" alt="Profile Icon" class="nav-icon">
        <span class="nav-text">Profile</span>
    </a>
    <a href="/gallery" class="nav-link" aria-label="Navigate to Gallery">
        <img src="images/gallery2.png" alt="Gallery Icon" class="nav-icon">
        <span class="nav-text">Gallery</span>
    </a>
    <a href="/events" class="nav-link" aria-label="Navigate to Events">
        <img src="images/calender2.png" alt="Events Icon" class="nav-icon">
        <span class="nav-text">Events</span>
    </a>
    <a href="/userchat" class="nav-link" aria-label="Navigate to Chat Page">
        <img src="images/chat2.png" alt="Chat Icon" class="nav-icon">
        <span class="nav-text">Chat with Us</span>
    </a>
    <a href="/Welcome" class="nav-link" aria-label="Navigate to Home">
        <img src="images/home2.png" alt="Home Icon" class="nav-icon">
        <span class="nav-text">Home</span>
    </a>
    <a href="/userReport" class="nav-link" aria-label="Navigate to UserReport">
        <img src="images/report2.png" alt="Report Icon" class="nav-icon">
        <span class="nav-text">Report</span>
    </a>
</div>

<div class="report-container">
    <h4 style="font-weight: bold;">@(isEditing ? "Edit Report" : "Report an Animal")</h4>
    @if (loading)
    {
        <div class="spinner">Loading...</div> 
    }
    else
    {
        <EditForm Model="@animalReport" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <div class="input-container">
                    <label for="location">Location:</label>
                    <InputText id="location" @bind-Value="animalReport.location" class="form-control" required />
                </div>
            </div>

            <div class="form-group">
                <div class="input-container">
                    <label for="description">Description:</label>
                    <InputTextArea id="description" @bind-Value="animalReport.Description" class="form-control" required />
                </div>
            </div>

            <div class="form-group">
                <div class="input-container">
                    <label for="contact">Contact Info:</label>
                    <InputText id="contact" @bind-Value="animalReport.ContactInfo" class="form-control" required />
                </div>
            </div>

            <div class="form-group">
                <div class="input-container">
                    <label for="status">Status:</label>
                    <InputSelect id="status" @bind-Value="animalReport.Status" class="form-control" required>
                        <option value="">Select Status</option>
                        <option value="Lost">Lost</option>
                        <option value="Wandering">Wandering</option>
                        <option value="Abused">Abused</option>
                        <option value="In Need of Care">In Need of Care</option>
                    </InputSelect>
                </div>
            </div>

            <div class="submit-container">
                <button type="submit" class="btn btn-primary custom-submit-button">
                    @(isEditing ? "Update Report" : "Submit Report")
                </button>
            </div>
        </EditForm>

        @if (errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div> 
        }

        @if (successMessage != null)
        {
            <div class="alert alert-success">@successMessage</div> 
        }
    }
    <h4 style="font-weight: bold;">Submitted Reports</h4>
    <div class="reports-list">
        
        @if (reports.Any())
        {
            foreach (var report in reports)
            {
                <div class="report-card">
                    <h5>Location: @report.location</h5>
                    <p><strong>Description:</strong> @report.Description</p>
                    <p><strong>Contact Info:</strong> @report.ContactInfo</p>
                    <p><strong>Status:</strong> <span class="status" style="color:@GetStatusColor(report.Status)">@report.Status</span></p>
                    <button class="btn btn-danger" @onclick="@(() => DeleteReport(report.ReportId))">Delete</button>
                </div>
            }
        </div>
    }
    else
    {
        <p>No reports submitted yet.</p>
    }
</div>

<div class="bottom-nav">
    <a href="/information" class="nav-item" aria-label="Information"<img src="images/info2.png" alt="Information" class="nav-icon"></a>
    <a href="/profile" class="nav-item" aria-label="Profile"> <img src="images/profile2.png" alt="Profile" class="nav-icon"></a>
    <a href="/gallery" class="nav-item" aria-label="Gallery"<img src="images/gallery2.png" alt="Gallery" class="nav-icon"></a>
    <a href="/events" class="nav-item" aria-label="Events"<img src="images/calender2.png" alt="Events" class="nav-icon"></a>
    <a href="/userchat" class="nav-item" aria-label="Chat with Us"> <img src="images/chat2.png" alt="Chat" class="nav-icon"> </a>
    <a href="/Welcome" class="nav-link" aria-label="Navigate to Home"><img src="images/home2.png" alt="Home Icon" class="nav-icon"> </a>
    <a href="/userReport" class="nav-link" aria-label="Navigate to UserReport"> <img src="images/report2.png" alt="Report Icon" class="nav-icon"> </a>
</div>

@using Google.Cloud.Firestore

@code {
    Report animalReport = new Report();
    List<Report> reports = new List<Report>();
    private bool isEditing = false; // Flag to differentiate between new submission and editing
    private string? errorMessage = null; // For displaying error messages
    private string? successMessage = null; // For displaying success messages
    private bool loading = false; // Flag for loading state

    protected override async Task OnInitializedAsync()
    {
        
        await GetReports();
    }
    private async Task HandleValidSubmit()
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(animalReport.Status), "Status");
        content.Add(new StringContent(animalReport.ContactInfo), "ContactInfo");
        content.Add(new StringContent(animalReport.location), "Location");
        content.Add(new StringContent(animalReport.Description), "Description");
        // Post report to external API
        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/Report", content);
        if (!response.IsSuccessStatusCode)
        {
            errorMessage = "Failed to submit report to API";
        }

        // Reset the form and state after submission
        animalReport = new Report();
        isEditing = false;
        await GetReports();
    }

    private async Task GetReports()
    {
        reports = await Http.GetFromJsonAsync<List<Report>>("https://spcaapi.azurewebsites.net/api/Report/GetReports");
        foreach (var rep in reports)
        {
            Console.WriteLine(rep.location);
        }
    }

    private async Task EditReport(Report reportToEdit)
    {
        animalReport = reportToEdit;
        isEditing = true;
        successMessage = null;
        errorMessage = null;
        StateHasChanged();
    }

    private async Task DeleteReport(string reportId)
    {
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/Report?id=" + reportId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/userReport", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "Lost" => "red",
            "Wandering" => "orange",
            "Abused" => "darkred",
            "In Need of Care" => "green",
            _ => "black"
        };
    }

    public class Report
    {
        public string ReportId { get; set; }
        public string location { get; set; }
        public string Description { get; set; }
        public string ContactInfo { get; set; }
        public string Status { get; set; }
    }
}

 <style>
      body {
        font-family: Arial, sans-serif;
        color: #333;
        background: url('/images/background123.png') no-repeat center center;
        background-size: cover;
    }

    .top {
        margin: 30px;
        text-align: center;
    }
    
    .report-container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        background-color: #A2A2AD;
        border-radius: 8px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

        
        .report-container h4 {
            text-align: center;
            font-weight: bold;
            color: #333;
            margin-bottom: 20px;
        }

    
    .form-group {
        margin-bottom: 15px;
    }

    
    .input-container {
        display: flex;
        flex-direction: column;
    }

        .input-container label {
            font-weight: 500;
            color: #555;
            margin-bottom: 5px;
        }

    
    .form-control {
        padding: 10px;
        font-size: 1rem;
        border: 1px solid #ced4da;
        border-radius: 4px;
        outline: none;
        transition: border-color 0.3s ease;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.25);
        }

   
    input[type="select"], .form-control {
        appearance: none;
        background-color: #fff;
    }

    
    .custom-submit-button {
        width: 100%;
        padding: 12px;
        font-size: 1rem;
        color: #fff;
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .custom-submit-button:hover {
            background-color: #0056b3;
        }

   
    .alert {
        margin-top: 15px;
        padding: 10px;
        border-radius: 4px;
        font-weight: 500;
        text-align: center;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    
    .spinner {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1.2rem;
        color: #007bff;
        margin: 20px 0;
    }


    .submit-container {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .custom-submit-button {
        background-color: white; 
        color: #143963; 
        border: 2px solid #143963; 
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .custom-submit-button:hover {
            background-color: #143963; 
            color: white; 
        }


    .reports-list {
        list-style-type: none; /* Remove bullet points from the list */
        padding: 0; /* Remove default padding */
        margin: 0; /* Remove default margin */
        width: 100%;
        align-content: center;
        text-align: center;
        justify-content: center;
        display: flex;
        row-gap: 5px;
        flex-wrap: wrap;
    }


    .report-card {
        background-color: white; /* Background color for event items */
        
        border: 1px solid #dee2e6; /* Optional: Border around event items */
        border-radius: 5px; /* Optional: Rounded corners */
        padding: 15px; /* Padding inside each event item */
        margin: 10px; /* Space between event items */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Optional: Shadow effect */
        transition: transform 0.2s; /* Optional: Smooth transition for hover effects */
        display: flex; /* Optional: Enable Flexbox for inner content */
        flex-direction: column; /* puts the info in the item underneath each other */
        width: calc(33.33% - 20px);
    }

    .report-card .button-container {
        display: flex; /* Enable Flexbox for button container */
        justify-content: center; /* Center buttons horizontally */
        margin-top: 10px; /* Space between text and buttons */
    }

    .report-card button {
        background-color: #1A4D7A;
        color: white;
        border-radius: 10px; /* Optional: Rounded corners */
        width: 70%;
        margin: auto;
        flex-direction: row;
        flex-wrap: wrap;
    }

    .event-card button:hover {
        transform: scale(1.05);
    }

    .event-card:hover {
        transform: scale(1.05); /* Optional: Slightly enlarge the item on hover */
    }
       

        .report-card p {
            margin: 5px 0;
        }

        .report-card:hover {
            background-color: #f0f0f0;
        }


    .btn-danger {
        background-color: #ff4d4d;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        color: white;
        cursor: pointer;
        margin-top: 10px;
    }

        .btn-danger:hover {
            background-color: #cc0000;
        }

    .input-container {
        display: flex;
        align-items: center;
    }

        .input-container label {
            flex: 1;
            margin-right: 10px;
            text-align: right;
        }

        .input-container .form-control {
            flex: 2;
        }

    input[type="text"],
    input[type="email"],
    textarea {
        width: 100%;
        padding: 10px;
        border: 2px solid #143963;
        border-radius: 5px;
        transition: border-color 0.3s ease;
    }

        input[type="text"]:focus,
        input[type="email"]:focus,
        textarea:focus {
            border-color: #0e2a4c;
        }

    .side-navbar {
        height: 100%;
        width: 60px; 
        position: fixed;
        top: 0;
        left: 0;
        background-color: #143963;
        overflow-x: hidden;
        transition: width 0.3s ease; 
        padding-top: 60px;
        z-index: 100;
        border-right: 2px solid #ffffff;
    }

        .side-navbar:hover {
            width: 250px; 
        }

    .nav-link {
        display: flex;
        align-items: center;
        padding: 15px 20px;
        font-size: 1.2em;
        color: #e0f7fa;
        transition: background-color 0.3s ease;
        text-decoration: none;
    }

        .nav-link:hover {
            background-color: #4775A9;
            color: #ffffff;
        }

    .nav-icon {
        width: 24px;
        height: 24px;
        margin-right: 15px;
        transition: margin-right 0.3s ease;
    }

    .side-navbar:hover .nav-icon {
        margin-right: 10px; 
    }

    .nav-text {
        display: none; 
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .side-navbar:hover .nav-text {
        display: inline; 
        opacity: 1;
    }
    
    .arrow-icon {
        font-size: 16px;
        color: #ffffff;
        text-align: center;
        margin-bottom: 10px;
        display: block;
        transform: rotate(0deg);
        transition: opacity 0.3s ease;
    }

    .side-navbar:hover .arrow-icon {
        opacity: 0;
    }

    .bottom-nav {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        width: 100%;
        height: 60px;
        background-color: #143963;
        box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.2);
        display: none; 
        justify-content: space-around;
        align-items: center;
        z-index: 1000;
    }

    .nav-item {
        flex: 1;
        text-align: center;
        transition: transform 0.3s ease, background-color 0.3s ease;
        padding: 5px;
    }

        .nav-item:hover {
            background-color: #f0f0f0;
            transform: scale(1.1);
            border-radius: 10px;
        }
    
    @@media screen and (max-width: 768px) {
        .side-navbar {
            display: none; 
        }

        .main-content {
            margin-left: 0; 
        }

        .bottom-nav {
            display: flex; 
        }
    }

    @@media screen and (min-width: 769px) {
        .bottom-nav {
            display: none;
        }
    }

</style>
