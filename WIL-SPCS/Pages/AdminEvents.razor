@page "/AdminEvents"

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<PageTitle>Events</PageTitle>

<a href="/desktophome" class="open-nav-btn" onclick="openNav()">Home </a>

@* <button class="open-nav-btn" onclick="openNav()">☰ </button>
<!-- Side Navigation Bar -->
<div id="sideNavbar" class="side-navbar">
    <a href="javascript:void(0)" class="close-btn" onclick="closeNav()">×</a>
    <a href="/adminmessages" class="nav-link">Messages</a>
    <a href="/adminboardings" class="nav-link">Boardings</a>
    <a href="/adminvolunteers" class="nav-link">Volunteers</a>
    <a href="/admininventory" class="nav-link">Inventory</a>
    <a href="/adminevents" class="nav-link">Events</a>
    <!-- Add more links here as needed -->
</div> *@

<!-- Calendar and Date Picker -->
<div class="calendar-container">
    @if (addEvent)
    {
        <div class="login-container">
            <div class="login-form">
                <h3 class="bold-text">Add Event</h3>
                <div class="form-group">
                    <label for="date" class="bold-text">Date</label>
                    <input type="date" @bind="selectedDate" class="date-picker form-control rounded-input" />
                </div>

                <div class="form-group">
                    <label for="eventname" class="bold-text">Event Name</label>
                    <input id="eventname" @bind="evName" class="form-control rounded-input" />
                </div>
                <div class="form-group">
                    <label for="eventdescription" class="bold-text">Event Description</label>
                    <input id="eventdescription" @bind="evDescription" class="form-control rounded-input" />
                </div>

                <button type="submit" @onclick="AddEvent" class="btn btn-primary rounded-button bold-text">Add</button>
            </div>
        </div>
    }
    @if (editEvent)
    {
        <div class="login-container">
            <div class="login-form">
                <h3 class="bold-text">Edit Event</h3>
                <div class="form-group">
                    <label for="date" class="bold-text">Date</label>
                    <input type="date" @bind="selectedDate" class="date-picker form-control rounded-input" />
                </div>

                <div class="form-group">
                    <label for="eventname" class="bold-text">Event Name</label>
                    <input id="eventname" @bind="evName" class="form-control rounded-input" />
                </div>
                <div class="form-group">
                    <label for="eventdescription" class="bold-text">Event Description</label>
                    <input id="eventdescription" @bind="evDescription" class="form-control rounded-input" />
                </div>

                <button type="submit" @onclick="EditEvent" class="btn btn-primary rounded-button bold-text">Edit</button>
                <button type="submit" @onclick="Cancel" class="btn btn-primary rounded-button bold-text">Cancel</button>
            </div>
        </div>
    }
    else
    {
        <h2 class="centered-text" style="color: white;">Events</h2>
        <h3 style="color: white;">Select a Date to See Events</h3>
        <input type="date" id="datepicker" @bind="selectedDate" class="date-picker" /><br />
        <button class="btn btn-primary rounded-button bold-text" @onclick="AddEventForm">Add Event</button>


         <div class="calendar">
        <div class="header">
            <div class="day">Mon</div>
            <div class="day">Tue</div>
            <div class="day">Wed</div>
            <div class="day">Thu</div>
            <div class="day">Fri</div>
            <div class="day">Sat</div>
            <div class="day">Sun</div>
        </div>
        <div class="body">
            <!-- Calendar Days -->
            <div class="day" onclick="selectDate(1)">1</div>
            <div class="day" onclick="selectDate(2)">2</div>
            <div class="day" onclick="selectDate(3)">3</div>
            <div class="day" onclick="selectDate(4)">4</div>
            <div class="day" onclick="selectDate(5)">5</div>
            <div class="day" onclick="selectDate(6)">6</div>
            <div class="day" onclick="selectDate(7)">7</div>
            <div class="day" onclick="selectDate(8)">8</div>
            <div class="day" onclick="selectDate(9)">9</div>
            <div class="day" onclick="selectDate(10)">10</div>
            <div class="day" onclick="selectDate(11)">11</div>
            <div class="day" onclick="selectDate(12)">12</div>
            <div class="day" onclick="selectDate(13)">13</div>
            <div class="day" onclick="selectDate(14)">14</div>
            <div class="day" onclick="selectDate(15)">15</div>
            <div class="day" onclick="selectDate(16)">16</div>
            <div class="day" onclick="selectDate(17)">17</div>
            <div class="day" onclick="selectDate(18)">18</div>
            <div class="day" onclick="selectDate(19)">19</div>
            <div class="day" onclick="selectDate(20)">20</div>
            <div class="day" onclick="selectDate(21)">21</div>
            <div class="day" onclick="selectDate(22)">22</div>
            <div class="day" onclick="selectDate(23)">23</div>
            <div class="day" onclick="selectDate(24)">24</div>
            <div class="day" onclick="selectDate(25)">25</div>
            <div class="day" onclick="selectDate(26)">26</div>
            <div class="day" onclick="selectDate(27)">27</div>
            <div class="day" onclick="selectDate(28)">28</div>
            <div class="day" onclick="selectDate(29)">29</div>
            <div class="day" onclick="selectDate(30)">30</div>
            <div class="day" onclick="selectDate(31)">31</div>
        </div>
    </div>
    <script>
        function selectDate(day) {
            const datepicker = document.getElementById('datepicker');
            const today = new Date();
            const month = today.getMonth() + 1; // Months are 0-based
            const year = today.getFullYear();
            datepicker.value = `${year}-${month < 10 ? '0' + month : month}-${day < 10 ? '0' + day : day}`;
        }
    </script>


        <!-- Events List -->
        <div class="events-container">
            <h3 class="centered-text">Events on @selectedDate.ToShortDateString()</h3>
            <ul>
                @foreach (var ev in events)
                {
                    <li class="event-item">
                        <strong>@ev.eventDate</strong>
                        <strong>@ev.eventName</strong>
                        <p>@ev.eventDescription</p>
                        <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => EditEventForm(ev)">Edit</button>
                        <button class="btn btn-danger" @onclick="@(() => DeleteEvent(ev.eventId))">Delete</button>
                    </li>
                }
            </ul>
        </div>
    }
</div>


@code {
    private DateOnly selectedDate = DateOnly.FromDateTime(DateTime.Now);
    private string evName = string.Empty;
    private string evDescription = string.Empty;
    private Event currentEvent = new Event();
    private List<Event> events = new List<Event>();
    public bool addEvent = false;
    public bool editEvent = false;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        var usertype = await LocalStorage.GetItemAsync<string>("userType");
        await LoadEvents();
    }

    private void OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value.ToString(), out var date))
        {
            selectedDate = DateOnly.FromDateTime(date);
            LoadEvents();
        }
    }

    private async Task LoadEvents()
    {
        // Load events based on the selected date (placeholder logic)
        events = await Http.GetFromJsonAsync<List<Event>>("https://spcaapi.azurewebsites.net/api/events/GetEvents");

    }

    public class Event
    {
        public string eventName { get; set; }
        public string eventDescription { get; set; }
        public string eventId { get; set; }
        public string eventDate { get; set; }
    }
    private async Task AddEvent(MouseEventArgs e)
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(evName), "eventName");
        content.Add(new StringContent(evDescription), "eventDescription");
        content.Add(new StringContent(selectedDate.ToString()), "eventDate");
        // Post report to external API
        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/events/AddEvent", content);
        if (response.IsSuccessStatusCode)
        {
            // Reset the form and state after submission
            Navigation.NavigateTo("/AdminEvents", true);
            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to submit report to API";
        }
    }
    private void AddEventForm(MouseEventArgs e)
    {
        addEvent = true;
    }
    private async Task DeleteEvent(string eventId)
    {
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/events/DeleteEvent/" + eventId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminEvents", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
    }
    private void EditEventForm(Event ev)
    {
        currentEvent = ev;
        evName = ev.eventName;
        evDescription = ev.eventDescription;
        selectedDate = DateOnly.Parse(ev.eventDate);
        editEvent = true;
        StateHasChanged();
    }
    private async Task EditEvent(MouseEventArgs e)
    {
        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(evName), "eventName");
        content.Add(new StringContent(evDescription), "eventDescription");
        content.Add(new StringContent(selectedDate.ToString()), "eventDate");

        // make request
        var response = await Http.PutAsync($"https://spcaapi.azurewebsites.net/api/events/UpdateEvent/" + currentEvent.eventId, content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminEvents", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
        StateHasChanged();
    }
    private void Cancel(MouseEventArgs e)
    {
        editEvent = false;
        addEvent = false;
        StateHasChanged();
    }
}

<style>
    

    .centered-text {
        text-align: center;
        accent-color: #143963;
    }

    .calendar-container {
        padding: 20px;
        text-align: center;
        color: #143963;
    }

    .date-picker {
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        margin: 10px 0;
        color: #143963;
    }



    .calendar {
        width: 80%;
        max-width: 1000px;
        margin: 0 auto;
        border: 1px solid #ccc;
    }

    .header {
        display: flex;
        background-color: #143963;
        color: white;
    }

        .header .day {
            flex: 1; /* Ensure that each header takes equal space */
            text-align: center;
            padding: 7px;
        }

    .day {
        flex: 1; /* Ensure that each day takes equal space */
        text-align: center;
        padding: 20px;
        border: 1px solid #ccc;
        box-sizing: border-box; /* Ensure padding does not affect width */
    }

        .day:hover {
            background-color: #e0e0e0;
        }

    .body {
        display: flex;
        flex-wrap: wrap; /* Allow wrapping of days to create rows */
    }

        /* Ensure each day takes the same width as headers */
        .body .day {
            flex: 1; /* Ensure that each day takes equal space */
            min-width: 14.2857%; /* 100% divided by 7 days */
            box-sizing: border-box; /* Ensure padding does not affect width */
        }


    .rounded-button{
        width:max-content;
        color: #f4f4f4;
        color-scheme: #143963;
        background-color: #143963;
    }

    .events-container {
        padding: 20px;
        color: #143963;
    }

    .event-item {
        background-color: #143963 ; /* Light blue background */
        border: 1px solid #e6f7ff; /* Blue border */
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 15px;
        text-align: center;
        color: #e6f7ff; /* Blue text color */
    }

        .event-item strong {
            display: block;
            font-size: 1.5em;
            margin-bottom: 10px;
        }

        .event-item p {
            margin: 0;
            font-size: 1.2em;
        }

    /* Side Navbar Styles */
    .side-navbar {
        height: 100%;
        width: 250px;
        position: fixed;
        top: 0;
        left: -250px; /* Initially hidden */
        background-color: #143963; /* Blue background for navbar */
        color: white;
        overflow-x: hidden;
        transition: 0.3s; /* Smooth transition for opening and closing */
        padding-top: 60px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
    }

        .side-navbar .nav-link {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 1.2em;
            color: white;
            display: block;
            transition: 0.3s;
        }

            .side-navbar .nav-link:hover {
                background-color: #143963; /* Darker blue for hover effect */
            }

        .side-navbar .close-btn {
            position: absolute;
            top: 10px;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

        /* Show the side navbar when it is active */
        .side-navbar.active {
            left: 0;
        }
</style>

<script>
    function openNav() {
        document.getElementById("sideNavbar").classList.add("active");
    }

    function closeNav() {
        document.getElementById("sideNavbar").classList.remove("active");
    }
</script>
