@page "/AdminEvents"

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
<PageTitle>Events</PageTitle>

<a href="/desktophome" class="open-nav-btn" onclick="openNav()">Home </a>

<div class="calendar-container">
    @if (addEvent)
    {
        <div class="login-container">
            <div class="login-form">
                <h3 class="bold-text">Add Event</h3>
                <div class="form-group">
                    <label for="date" class="bold-text">Date</label>
                    <input type="date" @bind="selectedDate" class="date-picker form-control rounded-input" />
                </div>

                <div class="form-group">
                    <label for="eventname" class="bold-text">Event Name</label>
                    <input id="eventname" @bind="evName" class="form-control rounded-input" />
                </div>
                <div class="form-group">
                    <label for="eventdescription" class="bold-text">Event Description</label>
                    <input id="eventdescription" @bind="evDescription" class="form-control rounded-input" />
                </div>

                <button type="submit" @onclick="AddEvent" class="btn btn-primary rounded-button bold-text">Add</button>
            </div>
        </div>
    }
    @if (editEvent)
    {
        <div class="login-container">
            <div class="login-form">
                <h3 class="bold-text">Edit Event</h3>
                <div class="form-group">
                    <label for="date" class="bold-text">Date</label>
                    <input type="date" @bind="selectedDate" class="date-picker form-control rounded-input" />
                </div>

                <div class="form-group">
                    <label for="eventname" class="bold-text">Event Name</label>
                    <input id="eventname" @bind="evName" class="form-control rounded-input" />
                </div>
                <div class="form-group">
                    <label for="eventdescription" class="bold-text">Event Description</label>
                    <input id="eventdescription" @bind="evDescription" class="form-control rounded-input" />
                </div>

                <button type="submit" @onclick="EditEvent" class="btn btn-primary rounded-button bold-text">Edit</button>
                <button type="submit" @onclick="Cancel" class="btn btn-primary rounded-button bold-text">Cancel</button>
            </div>
        </div>
    }
    @if (deleteEvent)
    {
        <div class="login-container">
            <div class="login-form">
                <h3 class="bold-text">Delete Boarding</h3>
                <p><b>Are you sure you want to delete this Boarding?</b></p>
                <button type="submit" @onclick="DeleteEvent" class="btn btn-primary btn-submit">Delete</button>
                <button type="submit" @onclick="Cancel" class="btn btnx btn-danger btn-submit">Cancel</button>
            </div>
        </div>
    }
    else if(!editEvent && !addEvent)
    {
        <h2 class="centered-text">Events</h2>
        <div class="calendar-container">
            <h3>Select a Date to See Events</h3>
            <input type="date" id="datepicker" @bind="selectedDate" class="date-picker" />
            <button class="btn btnx btn-primary" @onclick="ResetEvents">View All</button><br/>
            <button class="btn btnx btn-primary" @onclick="AddEventForm">Add Event</button>

            <CustomCalendar OnDateSelected="@(date => OnDateChanged(DateTime.Parse(date.ToString())))" />
        </div>

        <div class="events-container">
            <h3 class="centered-text">@eventString</h3>
            <ul>
                @foreach (var ev in events)
                {
                    <li class="event-item">
                        <strong>@ev.eventDate</strong>
                        <strong>@ev.eventName</strong>
                        <p>@ev.eventDescription</p>
                        <button class="btn btnx btn-primary" @onclick="() => EditEventForm(ev)">Edit</button>
                        <button class="btn btn-danger" @onclick="@(() => DeleteEventForm(ev))">Delete</button>
                    </li>
                }
            </ul>
        </div>
    }
</div>


@code {
    private DateTime _selectedDate = DateTime.Now;
    private string evName = string.Empty;
    private string evDescription = string.Empty;
    private Event currentEvent = new Event();
    private List<Event> events = new List<Event>();
    private List<Event> backupEvents = new List<Event>();
    public bool addEvent = false;
    public bool editEvent = false;
    public bool deleteEvent = false;
    private string? errorMessage = null;
    private string eventString = "All upcoming events";


    /*
    Code Attribution
    Title: How can I execute code when value of a variable changes in C#?
    Author: Mehrdad Afshari
    Author Link: https://stackoverflow.com/users/33708/mehrdad-afshari
    Post Link: https://stackoverflow.com/questions/1136613/how-can-i-execute-code-when-value-of-a-variable-changes-in-c
    Usage: Used to show events on date select
    */
    public DateTime selectedDate
    {
        get { return _selectedDate; }
        set
        {
            if(_selectedDate != value)
            {
                _selectedDate = value;
                SortEvents();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var usertype = await LocalStorage.GetItemAsync<string>("userType");
        await LoadEvents();
    }

    private void OnDateChanged(DateTime date)
    {
        selectedDate = date;
        SortEvents();
    }
    private void OnDateChanged()
    {
        SortEvents();
    }

    private void SortEvents()
    {
        events = backupEvents.Where(ev => DateTime.Parse(ev.eventDate).Date == selectedDate.Date).ToList();
        eventString = "Events on " + selectedDate.Date.ToString("dd/MM/yyyy");
    }

    private void ResetEvents(MouseEventArgs e)
    {
        selectedDate = DateTime.Now;
        events = backupEvents;
        eventString = "All upcoming events";
    }

    private async Task LoadEvents()
    {
        // Load events based on the selected date (placeholder logic)
        events = await Http.GetFromJsonAsync<List<Event>>("https://spcaapi.azurewebsites.net/api/events/GetEvents");
        backupEvents = events;
    }

    public class Event
    {
        public string eventName { get; set; }
        public string eventDescription { get; set; }
        public string eventId { get; set; }
        public string eventDate { get; set; }
    }
    private async Task AddEvent(MouseEventArgs e)
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(evName), "eventName");
        content.Add(new StringContent(evDescription), "eventDescription");
        content.Add(new StringContent(selectedDate.ToString("dd/MM/yyyy")), "eventDate");
        // Post report to external API
        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/events/AddEvent", content);
        if (response.IsSuccessStatusCode)
        {
            // Reset the form and state after submission
            Navigation.NavigateTo("/AdminEvents", true);
            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to submit report to API";
        }
    }
    private void DeleteEventForm(Event ev)
    {
        currentEvent = ev;
        deleteEvent = true;
    }
    private void AddEventForm(MouseEventArgs e)
    {
        addEvent = true;
    }
    private async Task DeleteEvent()
    {
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/events/DeleteEvent/" + currentEvent.eventId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminEvents", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
    }
    private void EditEventForm(Event ev)
    {
        currentEvent = ev;
        evName = ev.eventName;
        evDescription = ev.eventDescription;
        selectedDate = DateTime.Parse(ev.eventDate);
        editEvent = true;
        StateHasChanged();
    }
    private async Task EditEvent(MouseEventArgs e)
    {
        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(evName), "eventName");
        content.Add(new StringContent(evDescription), "eventDescription");
        content.Add(new StringContent(selectedDate.ToString()), "eventDate");

        // make request
        var response = await Http.PutAsync($"https://spcaapi.azurewebsites.net/api/events/UpdateEvent/" + currentEvent.eventId, content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminEvents", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
        StateHasChanged();
    }
    private void Cancel(MouseEventArgs e)
    {
        editEvent = false;
        addEvent = false;
        deleteEvent = false;
        StateHasChanged();
    }
}

<style>
    .centered-text {
        text-align: center;
        accent-color: #143963;
    }

    .calendar-container {
        padding: 20px;
        text-align: center;
        color: #143963;
    }

    .date-picker {
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        margin: 10px 0;
        color: #143963;
    }

    .calendar {
        width: 80%;
        max-width: 1000px;
        margin: 0 auto;
        border: 1px solid #ccc;
    }

    .header {
        display: flex;
        background-color: #143963;
        color: white;
    }

        .header .day {
            flex: 1; /* Ensure that each header takes equal space */
            text-align: center;
            padding: 7px;
        }

    .day {
        flex: 1; /* Ensure that each day takes equal space */
        text-align: center;
        padding: 20px;
        border: 1px solid #ccc;
        box-sizing: border-box; /* Ensure padding does not affect width */
    }

        .day:hover {
            background-color: #e0e0e0;
        }

    .body {
        display: flex;
        flex-wrap: wrap; /* Allow wrapping of days to create rows */
    }

        /* Ensure each day takes the same width as headers */
        .body .day {
            flex: 1; /* Ensure that each day takes equal space */
            min-width: 14.2857%; /* 100% divided by 7 days */
            box-sizing: border-box; /* Ensure padding does not affect width */
        }


    .rounded-button{
        width:max-content;
        color: #f4f4f4;
        color-scheme: #143963;
        background-color: #143963;
    }

    .events-container {
        padding: 20px;
        color: #143963;
    }

    .event-item {
        background-color: #143963; /* Light blue background */
        border: 1px solid #e6f7ff; /* Blue border */
        border-radius: 5px;
        padding: 15px;
        margin-bottom: 15px;
        text-align: center;
        color: #e6f7ff; /* Blue text color */
    }

        .event-item strong {
            display: block;
            font-size: 1.5em;
            margin-bottom: 10px;
        }

        .event-item p {
            margin: 0;
            font-size: 1.2em;
        }

    /* Side Navbar Styles */
    .side-navbar {
        height: 100%;
        width: 250px;
        position: fixed;
        top: 0;
        left: -250px; /* Initially hidden */
        background-color: #143963; /* Blue background for navbar */
        color: white;
        overflow-x: hidden;
        transition: 0.3s; /* Smooth transition for opening and closing */
        padding-top: 60px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
    }

        .side-navbar .nav-link {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 1.2em;
            color: white;
            display: block;
            transition: 0.3s;
        }

            .side-navbar .nav-link:hover {
                background-color: #143963; /* Darker blue for hover effect */
            }

        .side-navbar .close-btn {
            position: absolute;
            top: 10px;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

        /* Show the side navbar when it is active */
        .side-navbar.active {
            left: 0;
        }
</style>

<script>
    function openNav() {
        document.getElementById("sideNavbar").classList.add("active");
    }

    function closeNav() {
        document.getElementById("sideNavbar").classList.remove("active");
    }
</script>
