@page "/AdminInventory"

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<PageTitle>Inventory</PageTitle>

<button class="open-nav-btn" onclick="openNav()">☰ </button>
<!-- Side Navigation Bar -->
<div id="sideNavbar" class="side-navbar">
    <a href="javascript:void(0)" class="close-btn" onclick="closeNav()">×</a>
    <a href="/adminmessages" class="nav-link">Messages</a>
    <a href="/adminboardings" class="nav-link">Boardings</a>
    <a href="/adminvolunteers" class="nav-link">Volunteers</a>
    <a href="/admininventory" class="nav-link">Inventory</a>
    <a href="/adminevents" class="nav-link">Events</a>
</div>

@if (AddPetHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Add Pet</h3>
            <div class="form-group">
                <label for="breed" class="bold-text">Pet Breed</label>
                <input id="breed" @bind="addBreed" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="name" class="bold-text">Pet Name</label>
                <input id="name" @bind="addName" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="health" class="bold-text">Pet Health</label>
                <input id="health" @bind="addHealth" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="weight" class="bold-text">Pet Weight</label>
                <input id="weight" @bind="addWeight" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="status" class="bold-text">Pet Adpotion Status</label>
                <input id="status" @bind="addAdoption" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="image" class="bold-text">Image</label>
                <InputFile id="image" OnChange="HandleFileSelected" class="form-control rounded-input" />
            </div>

            <button type="submit" @onclick="AddPet" class="btn btn-primary rounded-button bold-text">Add</button><br />
            <button type="submit" @onclick="Cancel" class="btn btn-primary rounded-button bold-text">Cancel</button>
        </div>
    </div>
}
@if (EditPetHtml && !AddPetHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Edit Pet</h3>
            <div class="form-group">
                <label for="editname" class="bold-text">Pet Name</label>
                <input id="editname" @bind="editName" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="editbreed" class="bold-text">Pet Breed</label>
                <input id="editbreed" @bind="editBreed" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="edithealth" class="bold-text">Pet Health</label>
                <input id="edithealth" @bind="editHealth" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="editweight" class="bold-text">Pet Weight</label>
                <input id="editweight" @bind="editWeight" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="editstatus" class="bold-text">Pet Adpotion Status</label>
                <input id="editStatus" @bind="editAdoption" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="image" class="bold-text">Image</label>
                <InputFile id="image" OnChange="HandleFileSelected" class="form-control rounded-input" />
            </div>

            <button type="submit" @onclick="EditPet" class="btn btn-primary rounded-button bold-text">Edit</button>
            <button type="submit" @onclick="Cancel" class="btn btn-primary rounded-button bold-text">Cancel</button>
        </div>
    </div>
}
@if (DeletePetHtml && !AddPetHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Delete Pet</h3>
            <p><b>Are you sure you want to delete this pet?</b></p>

            <button type="submit" @onclick="DeletePet" class="btn btn-primary rounded-button bold-text">Delete</button>
            <button type="submit" @onclick="Cancel" class="btn btn-primary rounded-button bold-text">Cancel</button>
        </div>
    </div>
}
@if (!AddPetHtml && !EditPetHtml && !DeletePetHtml)
{
    <div class="top">
        <div>
            <center><h3 class="heading centered-text">Inventory</h3></center>
            <center><input type="text" @oninput="search" placeholder="Search..." class="desktop-search-bar"></center>
            <center><button class="btn btnx btn-primary rounded-button bold-text" @onclick="AddPetForm">Add Pet</button></center>
        </div>
    </div>

    <div style="padding-left: 16px"></div>

    <div class="tbl-pets">
        <table class="table-style">
            <tr>
                <th>Pet ID</th>
                <th>Name</th>
                <th>Breed</th>
                <th>Health</th>
                <th>Weight</th>
                <th>Status</th>
                <th>Image</th>
                <th></th>
            </tr>
            @foreach(var pet in pets)
            {
                <tr>
                    <td>@pet.petId</td>
                    <td>@pet.name</td>
                    <td>@pet.breed</td>
                    <td>@pet.health</td>
                    <td>@pet.weight</td>
                    <td>@pet.adoptionStatus</td>
                    <td><a href="@pet.imageUrl" target="_blank">View Image</a></td>
                    <td>
                        <center>
                            <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => DeletePetForm(pet.petId)">Delete</button>
                            <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => EditPetForm(pet)">Edit</button>
                        </center>
                    </td>
                </tr>
            }
        </table>
    </div>
}

@code {
    bool AddPetHtml = false;
    bool EditPetHtml = false;
    bool DeletePetHtml = false;

    string addBreed = string.Empty;
    string addName = string.Empty;
    string addHealth = string.Empty;
    string addWeight = string.Empty;
    string addAdoption = string.Empty;
    string addImage = string.Empty;

    string editName = string.Empty;
    string editBreed = string.Empty;
    string editHealth = string.Empty;
    string editWeight = string.Empty;
    string editAdoption = string.Empty;

    string petId = string.Empty;
    Pet editPet = new Pet();
    List<Pet> pets = new List<Pet>();
    List<Pet> backupPets = new List<Pet>();
    private IBrowserFile selectedFile;

    /*
    Code Attribution
    Title: Uploading Files to Blazor - The Blazor File Upload Mini Course
    Author: IAmTimCorey
    Link: https://www.youtube.com/watch?v=9H6hs61UK84
    Usage: Used to upload images
    */
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        using (var stream = selectedFile.OpenReadStream(5 * 1024 * 1024)) 
        {
            var buffer = new byte[selectedFile.Size];
            await stream.ReadAsync(buffer, 0, (int)selectedFile.Size);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetPets();
    }

    private async Task GetPets()
    {
        /*
        Code Attribution
        Title: GET Request to API with Blazor/C#
        Author: ZetBit
        Link: https://www.youtube.com/watch?v=SjhzOauYC80
        Usage: Used to make get request in blazer
        */
        pets = await Http.GetFromJsonAsync<List<Pet>>("https://spcaapi.azurewebsites.net/api/Animal/GetAnimals");
    }

    private void AddPetForm(MouseEventArgs e)
    {
        AddPetHtml = true;
        StateHasChanged();
    }
    private void EditPetForm(Pet pet)
    {
        editPet = pet;
        editName = pet.name;
        editWeight = pet.weight;
        editBreed = pet.breed;
        editHealth = pet.health;
        editWeight = pet.weight;
        editAdoption = pet.adoptionStatus;
        EditPetHtml = true;
        StateHasChanged();
    }
    private void DeletePetForm(string petId)
    {
        this.petId = petId;
        DeletePetHtml = true;
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Navigation.NavigateTo("/welcome");
    }
    private async Task AddPet(MouseEventArgs e)
    {

        /*
        Code Attribution
        Title: How To Make API Requests In Blazor WASM
        Author: Yassa Taiseer
        Link: https://www.youtube.com/watch?v=9LDRwEZoX-s
        Usage: Used to make post request in blazer
        */
        /*
        Code Attribution
        Title: Sending files and additional data using HttpClient in .NET Core
        Author: Bartłomiej Iskrzycki
        Link: https://brokul.dev/sending-files-and-additional-data-using-httpclient-in-net-core
        Usage: Used to make post request in blazer with files
        */
        var pet = new Pet
        {
            petId = "",
            name = addName,
            breed = addBreed,
            health = addHealth,
            weight = addWeight,
            adoptionStatus = addAdoption
        };

        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(pet.name), "name");
        content.Add(new StringContent(pet.breed), "breed");
        content.Add(new StringContent(pet.health), "health");
        content.Add(new StringContent(pet.weight.ToString()), "weight");
        content.Add(new StringContent(pet.adoptionStatus), "adoptionStatus");

        // add file to request
        if (selectedFile != null)
        {
            var streamContent = new StreamContent(selectedFile.OpenReadStream(5 * 1024 * 1024));
            content.Add(streamContent, "image", selectedFile.Name);
        }

        // make request
        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/Animal", content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminInventory", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
    }
    private async Task EditPet(MouseEventArgs e)
    {
        var pet = new Pet
            {
                petId = editPet.petId,
                name = editName,
                breed = editBreed,
                health = editHealth,
                weight = editWeight,
                adoptionStatus = editAdoption
            };
        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(pet.name), "name");
        content.Add(new StringContent(pet.breed), "breed");
        content.Add(new StringContent(pet.health), "health");
        content.Add(new StringContent(pet.weight.ToString()), "weight");
        content.Add(new StringContent(pet.adoptionStatus), "adoptionStatus");

        // add file to request
        if (selectedFile != null)
        {
            var streamContent = new StreamContent(selectedFile.OpenReadStream(5 * 1024 * 1024));
            content.Add(streamContent, "image", selectedFile.Name);
        }

        // make request
        var response = await Http.PatchAsync($"https://spcaapi.azurewebsites.net/api/Animal?id=" + editPet.petId, content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminInventory", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
        StateHasChanged();
    }
    private async Task DeletePet(MouseEventArgs e)
    {
        /*
        Code Attribution
        Title: How do you send an HTTP DELETE request using HttpClient in Blazor?
        Author: syncfusion
        Link: https://www.syncfusion.com/faq/blazor/web-api/how-do-you-send-an-http-delete-request-using-httpclient-in-blazor
        Usage: Used to make delete request in blazer
        */
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/Animal?id=" + petId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminInventory", true);
            StateHasChanged();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
    }
    private void Cancel(MouseEventArgs e)
    {
        AddPetHtml = false;
        StateHasChanged();
    }
    public class Pet
    {
        public string petId { get; set; }
        public string name { get; set; }
        public string breed { get; set; }
        public string health { get; set; }
        public string weight { get; set; }
        public string adoptionStatus { get; set; }
        public string imageUrl { get; set; }
    }
    private void search(ChangeEventArgs e)
    {
        var searchText = e.Value.ToString()?.Trim().ToLower() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchText))
        {
            pets = backupPets.Where(pet => pet.name.ToLower().Contains(searchText)).ToList();
        }
        else
        {
            pets = new List<Pet>(backupPets);
        }
        StateHasChanged();
    }
}

<style>
    .top {
        margin: 30px;
    }

    th, td {
        border: 1px solid black;
        border-collapse: collapse;
        background-color: white;
        padding: 10px;
    }


    .table-style {
        width: 100%;
        border-collapse: separate;
        background-color: white;
        border-radius: 12px;
        border: 1px solid black;
        overflow: hidden;
        border-spacing: 0;
        margin-bottom: 10px;
    }

    .login-form {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1rem;
        width: 100%;
    }

    .rounded-input {
        border-radius: 15px;
        width: 100%;
    }

    .rounded-button {
        border-radius: 15px;
        width: 100%;
    }

    .bold-text {
        font-weight: bold;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .btn {
        display: inline-block;
        font-weight: 400;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
    }

    .heading {
        width: fit-content;
        background-color: white;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        align-items: center;
        margin-bottom: 10px;
    }

    .btnx {
        width: fit-content;
        margin-top: 10px;
    }
    /* Side Navbar Styles */
    .side-navbar {
        height: 100%;
        width: 250px;
        position: fixed;
        top: 0;
        left: -250px; /* Initially hidden */
        background-color: #007BFF; /* Blue background for navbar */
        color: white;
        overflow-x: hidden;
        transition: 0.3s; /* Smooth transition for opening and closing */
        padding-top: 60px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
    }

        .side-navbar .nav-link {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 1.2em;
            color: white;
            display: block;
            transition: 0.3s;
        }

            .side-navbar .nav-link:hover {
                background-color: #0056b3; /* Darker blue for hover effect */
            }

        .side-navbar .close-btn {
            position: absolute;
            top: 10px;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

        /* Show the side navbar when it is active */
        .side-navbar.active {
            left: 0;
        }
</style>

<script>
    function openNav() {
        document.getElementById("sideNavbar").classList.add("active");
    }

    function closeNav() {
        document.getElementById("sideNavbar").classList.remove("active");
    }
</script>
