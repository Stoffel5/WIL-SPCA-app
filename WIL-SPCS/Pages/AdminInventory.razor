@page "/AdminInventory"

@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<PageTitle>Inventory</PageTitle>

<button class="open-nav-btn" onclick="openNav()">☰ </button>
<!-- Side Navigation Bar -->
<div id="sideNavbar" class="side-navbar">
    <a href="javascript:void(0)" class="close-btn" onclick="closeNav()">×</a>
    <a href="/adminmessages" class="nav-link">Messages</a>
    <a href="/adminboardings" class="nav-link">Boardings</a>
    <a href="/adminvolunteers" class="nav-link">Volunteers</a>
    <a href="/admininventory" class="nav-link">Inventory</a>
    <a href="/adminevents" class="nav-link">Events</a>
    <!-- Add more links here as needed -->
</div>

@if (AddPetHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Add Pet</h3>
            <div class="form-group">
                <label for="breed" class="bold-text">Pet Breed</label>
                <input id="breed" @bind="addBreed" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="name" class="bold-text">Pet Name</label>
                <input id="name" @bind="addName" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="health" class="bold-text">Pet Health</label>
                <input id="health" @bind="addHealth" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="weight" class="bold-text">Pet Weight</label>
                <input id="weight" type="number" @bind="addWeight" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="status" class="bold-text">Pet Adpotion Status</label>
                <input id="status" @bind="addAdoption" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="image" class="bold-text">Image</label>
                <input id="image" @bind="addImage" type="file" class="form-control rounded-input" />
            </div>

            <button type="submit" @onclick="AddPet" class="btn btn-primary rounded-button bold-text">Add</button><br />
            <button type="submit" @onclick="Cancel" class="btn btn-primary rounded-button bold-text">Cancel</button>
        </div>
    </div>
}
@if (EditPetHtml && !AddPetHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Edit Pet</h3>
            <div class="form-group">
                <label for="editname" class="bold-text">Pet Name</label>
                <input id="editname" @bind="editName" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="editbreed" class="bold-text">Pet Breed</label>
                <input id="editbreed" @bind="editBreed" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="edithealth" class="bold-text">Pet Health</label>
                <input id="edithealth" @bind="editHealth" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="editweight" class="bold-text">Pet Weight</label>
                <input id="editweight" @bind="editWeight" type="number" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="editstatus" class="bold-text">Pet Adpotion Status</label>
                <input id="editStatus" @bind="editAdoption" class="form-control rounded-input" />
            </div>

            <button type="submit" @onclick="EditPet" class="btn btn-primary rounded-button bold-text">Edit</button>
        </div>
    </div>
}
@if (DeletePetHtml && !AddPetHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Delete Pet</h3>
            <p><b>Are you sure you want to delete this pet?</b></p>

            <button type="submit" @onclick="DeletePet" class="btn btn-primary rounded-button bold-text">Delete</button>
        </div>
    </div>
}
@if (!AddPetHtml && !EditPetHtml && !DeletePetHtml)
{
    <div class="top">
        <div>
            <center><h3 class="heading centered-text">Inventory</h3></center>
            <center><input type="text" @oninput="search" placeholder="Search..." class="desktop-search-bar"></center>
            <center><button class="btn btnx btn-primary rounded-button bold-text" @onclick="AddPetForm">Add Pet</button></center>
        </div>
    </div>

    <div style="padding-left: 16px"></div>

    <div class="tbl-pets">
        <table class="table-style">
            <tr>
                <th>Pet ID</th>
                <th>Name</th>
                <th>Breed</th>
                <th>Health</th>
                <th>Weight</th>
                <th>Status</th>
                <th></th>
            </tr>
            @foreach(var pet in pets)
            {
                <tr>
                    <td>@pet.petId</td>
                    <td>@pet.name</td>
                    <td>@pet.breed</td>
                    <td>@pet.health</td>
                    <td>@pet.weight</td>
                    <td>@pet.adoptionStatus</td>
                    <td>
                        <center>
                            <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => DeletePetForm(pet.petId)">Delete</button>
                            <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => EditPetForm(pet)">Edit</button>
                        </center>
                    </td>
                </tr>
            }
        </table>
    </div>
}

@code {
    bool AddPetHtml = false;
    bool EditPetHtml = false;
    bool DeletePetHtml = false;

    string addBreed = string.Empty;
    string addName = string.Empty;
    string addHealth = string.Empty;
    int addWeight = 0;
    string addAdoption = string.Empty;
    string addImage = string.Empty;

    string editName = string.Empty;
    string editBreed = string.Empty;
    string editHealth = string.Empty;
    int editWeight = 0;
    string editAdoption = string.Empty;

    int petId = 0;
    Pet editPet = new Pet();
    List<Pet> pets = new List<Pet>();
    List<Pet> backupPets = new List<Pet>();

    protected override void OnInitialized()
    {
        // Initial load of events based on the default date
        LoadPets();
    }

    private void LoadPets()
    {
        // Load events based on the selected date (placeholder logic)
        pets = GetPets();
        backupPets = new List<Pet>(pets);
    }

    private List<Pet> GetPets()
    {
        // Placeholder logic for event fetching
        // Replace with actual data fetching from database or API
        return new List<Pet>
        {
            new Pet { petId = 1, name = "Max", breed = "Dog", health = "Health", weight = 60, adoptionStatus = "Adopted" },
            new Pet { petId = 2, name = "Misty", breed = "Dog", health = "Health", weight = 60, adoptionStatus = "Adopted" },
            new Pet { petId = 3, name = "Maya", breed = "Dog", health = "Health", weight = 60, adoptionStatus = "Adopted" }
        };
    }

    private void AddPetForm(MouseEventArgs e)
    {
        AddPetHtml = true;
        StateHasChanged();
    }
    private void EditPetForm(Pet pet)
    {
        editPet = pet;
        editBreed = pet.breed;
        editHealth = pet.health;
        editWeight = pet.weight;
        editAdoption = pet.adoptionStatus;
        EditPetHtml = true;
        StateHasChanged();
    }
    private void DeletePetForm(int petId)
    {
        this.petId = petId;
        DeletePetHtml = true;
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Navigation.NavigateTo("/welcome");
    }
    private void AddPet(MouseEventArgs e)
    {
        Pet pet = new Pet();
        pet.petId = 1;
        pet.name = addName;
        pet.breed = addBreed;
        pet.health = addHealth;
        pet.weight = addWeight;
        pet.adoptionStatus = addAdoption;
        addBreed = string.Empty;
        addHealth = string.Empty;
        addWeight = 0;
        addAdoption = string.Empty;
        addName = string.Empty;
        pets.Add(pet);
        backupPets.Add(pet);
        AddPetHtml = false;
        StateHasChanged();
    }
    private void EditPet(MouseEventArgs e)
    {
        var findPet = pets.FirstOrDefault(p => p.petId == editPet.petId);
        if(findPet != null)
        {
            findPet.health = editHealth;
            findPet.weight = editWeight;
            findPet.breed = editBreed;
            findPet.adoptionStatus = editAdoption;
            backupPets.Remove(findPet);
            backupPets.Add(findPet);
            pets.Remove(findPet);
            pets.Add(findPet);
        }
        EditPetHtml = false;
        StateHasChanged();
    }
    private void DeletePet(MouseEventArgs e)
    {
        var foundPet = pets.FirstOrDefault(p => p.petId == petId);
        if(foundPet != null)
        {
            pets.Remove(foundPet);
        }
        petId = 0;
        DeletePetHtml = false;
        StateHasChanged();
    }
    private void Cancel(MouseEventArgs e)
    {
        AddPetHtml = false;
        StateHasChanged();
    }
    public class Pet
    {
        public int petId { get; set; }
        public string name { get; set; }
        public string breed { get; set; }
        public string health { get; set; }
        public int weight { get; set; }
        public string adoptionStatus { get; set; }
        public string image { get; set; }
    }
    private void search(ChangeEventArgs e)
    {
        var searchText = e.Value.ToString()?.Trim().ToLower() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchText))
        {
            pets = backupPets.Where(pet => pet.name.ToLower().Contains(searchText)).ToList();
        }
        else
        {
            pets = new List<Pet>(backupPets);
        }
        StateHasChanged();
    }
}

<style>
    .top {
        margin: 30px;
    }

    th, td {
        border: 1px solid black;
        border-collapse: collapse;
        background-color: white;
        padding: 10px;
    }

    .table-style {
        width: 100%;
        border-collapse: separate;
        background-color: white;
        border-radius: 12px;
        border: 1px solid black;
        overflow: hidden;
        border-spacing: 0;
        margin-bottom: 10px;
    }

    .login-form {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1rem;
        width: 100%;
    }

    .rounded-input {
        border-radius: 15px;
        width: 100%;
    }

    .rounded-button {
        border-radius: 15px;
        width: 100%;
    }

    .bold-text {
        font-weight: bold;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .btn {
        display: inline-block;
        font-weight: 400;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
    }

    .heading {
        width: fit-content;
        background-color: white;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        align-items: center;
        margin-bottom: 10px;
    }

    .btnx {
        width: fit-content;
        margin-top: 10px;
    }
    /* Side Navbar Styles */
    .side-navbar {
        height: 100%;
        width: 250px;
        position: fixed;
        top: 0;
        left: -250px; /* Initially hidden */
        background-color: #007BFF; /* Blue background for navbar */
        color: white;
        overflow-x: hidden;
        transition: 0.3s; /* Smooth transition for opening and closing */
        padding-top: 60px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
    }

        .side-navbar .nav-link {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 1.2em;
            color: white;
            display: block;
            transition: 0.3s;
        }

            .side-navbar .nav-link:hover {
                background-color: #0056b3; /* Darker blue for hover effect */
            }

        .side-navbar .close-btn {
            position: absolute;
            top: 10px;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

        /* Show the side navbar when it is active */
        .side-navbar.active {
            left: 0;
        }
</style>

<script>
    function openNav() {
        document.getElementById("sideNavbar").classList.add("active");
    }

    function closeNav() {
        document.getElementById("sideNavbar").classList.remove("active");
    }
</script>
