@page "/AdminInventory"

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Inventory</PageTitle>

<a href="/desktophome" class="home-btn">
    <img src="images/adminhome.png" alt="Home" class="home-icon" />
</a>

@if (AddPetHtml)
{
    <EditForm Model="addPet" OnValidSubmit="AddPet">
        <DataAnnotationsValidator />

        <div class="form-container">
            <div class="form-card">
                <h3 class="form-title">Add Pet</h3>
                <div class="form-group">
                    <label for="name" class="bold-text">Pet Name</label>
                    <InputText id="name" @bind-Value="addPet.Name" class="form-input" />
                    <ValidationMessage For="@(() => addPet.Name)" />
                </div>
                <div class="form-group">
                    <label for="addAnimalType" class="bold-text">Animal Type</label>
                    <InputText id="addAnimalType" @bind-Value="addPet.AnimalType" class="form-input" />
                    <ValidationMessage For="@(() => addPet.AnimalType)" />
                </div>
                <div class="form-group">
                    <label for="breed" class="bold-text">Breed</label>
                    <InputText id="breed" @bind-Value="addPet.Breed" class="form-input" />
                    <ValidationMessage For="@(() => addPet.Breed)" />
                </div>
                <div class="form-group">
                    <label for="health" class="bold-text">Pet Health</label>
                    <InputText id="health" @bind-Value="addPet.Health" class="form-input" />
                    <ValidationMessage For="@(() => addPet.Health)" />
                </div>
                <div class="form-group">
                    <label for="weight" class="bold-text">Pet Weight</label>
                    <InputNumber id="weight" @bind-Value="addPet.Weight" class="form-input" />
                    <ValidationMessage For="@(() => addPet.Weight)" />
                </div>
                <div class="form-group">
                    <label for="status" class="bold-text">Pet Adoption Status</label>
                    <InputText id="status" @bind-Value="addPet.AdoptionStatus" class="form-input" />
                    <ValidationMessage For="@(() => addPet.AdoptionStatus)" />
                </div>
                <div class="form-group">
                    <label for="image" class="bold-text">Image</label>
                    <InputFile id="image" OnChange="HandleFileSelected" class="form-input" />
                    <span style="color: red;">@addError</span>
                </div>
                <button type="submit" class="btn btn-primary rounded-button bold-text">Add</button>
                <button type="button" @onclick="Cancel" class="btn btnx btn-danger rounded-button bold-text">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@if (EditPetHtml && !AddPetHtml)
{
    <EditForm Model="editPet" OnValidSubmit="EditPet">
        <DataAnnotationsValidator />
        <div class="form-container">
            <div class="form-card">
                <h3 class="form-title">Edit Pet</h3>
                <div class="form-group">
                    <label for="editname" class="bold-text">Pet Name</label>
                    <InputText id="editname" @bind-Value="editPet.Name" class="form-control rounded-input" />
                    <ValidationMessage For="@(() => editPet.Name)" />
                </div>
                <div class="form-group">
                    <label for="editAnimalType" class="bold-text">Animal Type</label>
                    <InputText id="editAnimalType" @bind-Value="editPet.AnimalType" class="form-control rounded-input" />
                    <ValidationMessage For="@(() => editPet.AnimalType)" />
                </div>
                <div class="form-group">
                    <label for="editbreed" class="bold-text">Breed</label>
                    <InputText id="editbreed" @bind-Value="editPet.Breed" class="form-control rounded-input" />
                    <ValidationMessage For="@(() => editPet.Breed)" />
                </div>
                <div class="form-group">
                    <label for="edithealth" class="bold-text">Pet Health</label>
                    <InputText id="edithealth" @bind-Value="editPet.Health" class="form-control rounded-input" />
                    <ValidationMessage For="@(() => editPet.Health)" />
                </div>
                <div class="form-group">
                    <label for="editweight" class="bold-text">Pet Weight</label>
                    <InputNumber id="editweight" @bind-Value="editPet.Weight" class="form-control rounded-input" />
                    <ValidationMessage For="@(() => editPet.Weight)" />
                </div>
                <div class="form-group">
                    <label for="editstatus" class="bold-text">Pet Adoption Status</label>
                    <InputText id="editStatus" @bind-Value="editPet.AdoptionStatus" class="form-control rounded-input" />
                    <ValidationMessage For="@(() => editPet.AdoptionStatus)" />
                </div>
                <div class="form-group">
                    <label for="image" class="bold-text">Image</label>
                    <InputFile id="image" OnChange="HandleFileSelected" class="form-control rounded-input" />
                    <span style="color: red;">@addError</span>
                </div>

                <button type="submit" @onclick="EditPet" class="btn btnx btn-primary rounded-button bold-text">Edit</button>
                <button type="button" @onclick="Cancel" class="btn btn-danger rounded-button bold-text">Cancel</button>
            </div>
        </div>
    </EditForm>
}
@if (DeletePetHtml && !AddPetHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Delete Pet</h3>
            <p><b>Are you sure you want to delete this pet?</b></p>

            <button type="submit" @onclick="DeletePet" class="btn btn-primary rounded-button bold-text">Delete</button>
            <button type="submit" @onclick="Cancel" class="btn btnx btn-danger rounded-button bold-text">Cancel</button>
        </div>
    </div>
}
@if (!AddPetHtml && !EditPetHtml && !DeletePetHtml)
{
    <div class="top">
        <div>
            <center><h3 class="page-title">Inventory</h3></center>
            <center>
                <input type="text" @oninput="search" placeholder="Search..." class="desktop-search-bar"></center>
            <center><button class="btn btnx btn-primary rounded-button bold-text" @onclick="AddPetForm">Add Pet</button></center>
        </div>
    </div>

    <div class="tbl-pets">
        <table class="table-style">
            <tr>
                <th>Name</th>
                <th>Animal Type</th>
                <th>Breed</th>
                <th>Health</th>
                <th>Weight</th>
                <th>Status</th>
                <th>Image</th>
                <th>Actions</th>
            </tr>
            @foreach(var pet in pets)
            {
                <tr>
                    <td>@pet.Name</td>
                    <td>@pet.AnimalType</td>
                    <td>@pet.Breed</td>
                    <td>@pet.Health</td>
                    <td>@pet.Weight.ToString() kg</td>
                    <td>@pet.AdoptionStatus</td>
                    <td><a href="@pet.ImageUrl" target="_blank">View Image</a></td>
                    <td>
                        <center>
                            <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => EditPetForm(pet)">Edit</button>
                            <button class="btn btnx btn-danger rounded-button bold-text" @onclick="() => DeletePetForm(pet.AnimalId)">Delete</button>
                        </center>
                    </td>
                </tr>
            }
        </table>
    </div>
}

@code {
    public class Pet
    {
        public int AnimalId { get; set; }

        [Required(ErrorMessage = "Pet name is required.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Breed is required.")]
        public string Breed { get; set; }

        [Required(ErrorMessage = "Health information is required.")]
        public string Health { get; set; }

        [Required(ErrorMessage = "Weight is required.")]
        public int Weight { get; set; }

        [Required(ErrorMessage = "Adoption status is required.")]
        public string AdoptionStatus { get; set; }

        [Required(ErrorMessage = "Animal type is required.")]
        public string AnimalType { get; set; }

        public string ImageUrl { get; set; }
    }
    bool AddPetHtml = false;
    bool EditPetHtml = false;
    bool DeletePetHtml = false;

    string addError = string.Empty;
    Pet addPet = new Pet();

    int petId = 0;
    Pet editPet = new Pet();
    List<Pet> pets = new List<Pet>();
    List<Pet> backupPets = new List<Pet>();
    private IBrowserFile selectedFile;

    protected override async Task OnInitializedAsync()
    {
        await CheckAccess();
    }
    private async Task CheckAccess()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");

            if (string.IsNullOrWhiteSpace(token))
            {
                Navigation.NavigateTo("/login", true);
                return;
            }

            var userType = GetUserTypeFromToken(token);
            Console.WriteLine(userType);

            if (userType != "Admin")
            {
                Navigation.NavigateTo("/login", true);
                return;
            }
            await GetPets();
        }
        catch (Exception)
        {
            Navigation.NavigateTo("/login", true);
        }
    }
    private string GetUserTypeFromToken(string token)
    {
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);

        var userTypeClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "role" || c.Type == "UserType");
        return userTypeClaim?.Value ?? string.Empty;
    }
    /*
    Code Attribution
    Title: Uploading Files to Blazor - The Blazor File Upload Mini Course
    Author: IAmTimCorey
    Link: https://www.youtube.com/watch?v=9H6hs61UK84
    Usage: Used to upload images
    */
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if(e.File == null)
        {
            addError = "Image/Video Required";
        }
        else
        {
            selectedFile = e.File;
            if (selectedFile.Size > 5 * 1024 * 1024)
            {
                addError = "File to large";
            }
            else
            {
                addError = string.Empty;
                using (var stream = selectedFile.OpenReadStream(5 * 1024 * 1024))
                {
                    var buffer = new byte[selectedFile.Size];
                    await stream.ReadAsync(buffer, 0, (int)selectedFile.Size);
                }
            }
        }
    }

    private async Task GetPets()
    {
        /*
        Code Attribution
        Title: GET Request to API with Blazor/C#
        Author: ZetBit
        Link: https://www.youtube.com/watch?v=SjhzOauYC80
        Usage: Used to make get request in blazer
        */
        pets = await Http.GetFromJsonAsync<List<Pet>>("https://spcaapi.azurewebsites.net/api/Animal/GetAnimals");
        backupPets = pets;
    }

    private void AddPetForm(MouseEventArgs e)
    {
        AddPetHtml = true;
        StateHasChanged();
    }
    private void EditPetForm(Pet pet)
    {
        editPet = pet;
        EditPetHtml = true;
        StateHasChanged();
    }
    private void DeletePetForm(int petId)
    {
        this.petId = petId;
        DeletePetHtml = true;
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Navigation.NavigateTo("/welcome");
    }
    private async Task AddPet()
    {

        /*
        Code Attribution
        Title: How To Make API Requests In Blazor WASM
        Author: Yassa Taiseer
        Link: https://www.youtube.com/watch?v=9LDRwEZoX-s
        Usage: Used to make post request in blazer
        */
        /*
        Code Attribution
        Title: Sending files and additional data using HttpClient in .NET Core
        Author: Bartłomiej Iskrzycki
        Link: https://brokul.dev/sending-files-and-additional-data-using-httpclient-in-net-core
        Usage: Used to make post request in blazer with files
        */
        /*
        Code Attribution
        Title: File Mime Type Checking
        Author: ffffff01
        Link: https://stackoverflow.com/questions/12233711/file-mime-type-checking
        Usage: Used to make user only uploads images or videos.
        */

        if (selectedFile != null)
        {
            var allowedFileTypes = new List<string> { "image/jpeg", "image/png", "image/gif", "video/mp4", "video/avi", "video/mkv" };
            if (!allowedFileTypes.Contains(selectedFile.ContentType))
            {
                addError = "Only images (JPEG, PNG, GIF) and videos (MP4, AVI, MKV) are allowed.";
                return;
            }
        }

        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(addPet.Name), "Name");
        content.Add(new StringContent(addPet.Breed), "Breed");
        content.Add(new StringContent(addPet.Health), "Health");
        content.Add(new StringContent(addPet.AnimalType), "AnimalType");
        content.Add(new StringContent(addPet.Weight.ToString()), "Weight");
        content.Add(new StringContent(addPet.AdoptionStatus), "AdoptionStatus");

        var streamContent = new StreamContent(selectedFile.OpenReadStream(5 * 1024 * 1024));
        streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
        content.Add(streamContent, "file", selectedFile.Name);// make request
        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/Animal", content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminInventory", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
    }
    private async Task EditPet()
    {
        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(editPet.Name), "Name");
        content.Add(new StringContent(editPet.Breed), "Breed");
        content.Add(new StringContent(editPet.Health), "Health");
        content.Add(new StringContent(editPet.AnimalType), "AnimalType");
        content.Add(new StringContent(editPet.Weight.ToString()), "Weight");
        content.Add(new StringContent(editPet.AdoptionStatus), "AdoptionStatus");

        // add file to request
        if (selectedFile != null)
        {
            var allowedFileTypes = new List<string> { "image/jpeg", "image/png", "image/gif", "video/mp4", "video/avi", "video/mkv" };
            if (!allowedFileTypes.Contains(selectedFile.ContentType))
            {
                addError = "Only images (JPEG, PNG, GIF) and videos (MP4, AVI, MKV) are allowed.";
                return;
            }
            var streamContent = new StreamContent(selectedFile.OpenReadStream(5 * 1024 * 1024));
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(streamContent, "file", selectedFile.Name);
        }
        else
        {
            content.Add(new StringContent(""), "file");
        }

        // make request
        var response = await Http.PatchAsync($"https://spcaapi.azurewebsites.net/api/Animal?id=" + editPet.AnimalId, content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminInventory", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
        StateHasChanged();
    }
    private async Task DeletePet(MouseEventArgs e)
    {
        /*
        Code Attribution
        Title: How do you send an HTTP DELETE request using HttpClient in Blazor?
        Author: syncfusion
        Link: https://www.syncfusion.com/faq/blazor/web-api/how-do-you-send-an-http-delete-request-using-httpclient-in-blazor
        Usage: Used to make delete request in blazer
        */
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/Animal?id=" + petId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminInventory", true);
            StateHasChanged();
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
    }
    private void Cancel(MouseEventArgs e)
    {
        AddPetHtml = false;
        EditPetHtml = false;
        DeletePetHtml = false;
        StateHasChanged();
    }
    private void search(ChangeEventArgs e)
    {
        var searchText = e.Value.ToString()?.Trim().ToLower() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchText))
        {
            pets = backupPets.Where(pet => pet.Name.ToLower().Contains(searchText)).ToList();
        }
        else
        {
            pets = new List<Pet>(backupPets);
        }
        StateHasChanged();
    }
}

<style>
    body {
        font-family: Arial, sans-serif;
        color: #333;
        background: url('/images/background123.png') no-repeat center center;
        background-size: cover;
    }


    .top {
        margin: 30px;
        text-align: center;
    }

    .page-title {
        color: #143963;
        margin-bottom: 20px;
        font-size: 60px;
    }

    .home-btn {
        display: inline-block;
        text-decoration: none;
        margin: 10px;
        width: 80px; 
        height: 80px;
        background-color: #143963;
        border-radius: 50%; 
        text-align: center;
        line-height: 80px; 
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); 
    }

        .home-btn:hover {
            transform: scale(1.1); 
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.3);
        }

    .home-icon {
        width: 60px; 
        height: 60px;
        vertical-align: middle;
        display: inline-block;
    }



    .desktop-search-bar {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 80%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .form-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .form-card {
        background: #ffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 300px;
        text-align: center;
    }

    .form-title {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
        width: 100%;
    }

    .form-label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 15px;
    }
    .tbl-pets {
        padding: 0 16px;
    }

    .table-style {
        width: 100%;
        border-collapse: collapse;
        border-radius: 12px;
        margin-bottom: 20px;
        overflow: hidden;
    }

    th, td {
        padding: 10px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #143963;
        color: white;
    }

    .login-form {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1rem;
        width: 100%;
    }

    .rounded-input {
        border-radius: 15px;
        width: 100%;
    }

    .rounded-button {
        border-radius: 15px;
        width: 100%;
    }

    .bold-text {
        font-weight: bold;
    }

    .btnx {
        margin-top: 5px;
        margin-bottom: 5px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 50%;
        font-size: 16px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .btn-primary {
        background-color: #143963;
        color: white;
        border: 1px solid #143963;
    }

        .btn-primary:hover {
            background-color: white;
            color: #143963;
            border-color: #143963;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: 1px solid #dc3545;
        margin-right: 5px;
    }

        .btn-danger:hover {
            border-color: #8a1212;
            color: #fff;
        }

    .btn-edit {
        background-color: #28a745;
        color: white;
        border: 1px solid #28a745;
        margin-right: 5px;
    }

        .btn-edit:hover {
            background-color: #218838;
            color: white;
        }



    .btn-add {
        background-color: #ffffff;
        color: #143963;
        border: 1px solid #143963;
        margin-top: 10px;
    }

        .btn-add:hover {
            background-color: #e0e0e0;
            color: #143963;
        }

    .desktop-search-bar {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 80%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .search-button {
        padding: 8px 15px;
        margin-left: 10px;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        background-color: #143963;
        color: #fff;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .search-button:hover {
            background-color: #fff;
            color: #143963;
        }

    .heading {
        width: fit-content;
        background-color: white;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        align-items: center;
        margin-bottom: 10px;
    }

    
    /* Side Navbar Styles */
    .side-navbar {
        height: 100%;
        width: 250px;
        position: fixed;
        top: 0;
        left: -250px; /* Initially hidden */
        background-color: #143963; /* Blue background for navbar */
        color: white;
        overflow-x: hidden;
        transition: 0.3s; /* Smooth transition for opening and closing */
        padding-top: 60px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
    }

        .side-navbar .nav-link {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 1.2em;
            color: white;
            display: block;
            transition: 0.3s;
        }

            .side-navbar .nav-link:hover {
                background-color: #143963; /* Darker blue for hover effect */
            }

        .side-navbar .close-btn {
            position: absolute;
            top: 10px;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

        /* Show the side navbar when it is active */
        .side-navbar.active {
            left: 0;
        }

    /* .btn-add {
        background-color: #ffff;
        color: #143963;
        margin-top: 10px;
        border: 1px solid #143963;
    }

        .btn-add:hover {
            background-color: #e0e0e0;
        } */
</style>

<script>
    function openNav() {
        document.getElementById("sideNavbar").classList.add("active");
    }

    function closeNav() {
        document.getElementById("sideNavbar").classList.remove("active");
    }
</script>
