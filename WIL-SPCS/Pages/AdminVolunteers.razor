@page "/AdminVolunteers"

@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Volunteers</PageTitle>

<button class="open-nav-btn" onclick="openNav()">☰ </button>
<!-- Side Navigation Bar -->
<div id="sideNavbar" class="side-navbar">
    <a href="javascript:void(0)" class="close-btn" onclick="closeNav()">×</a>
    <a href="/adminmessages" class="nav-link">Messages</a>
    <a href="/adminboardings" class="nav-link">Boardings</a>
    <a href="/adminvolunteers" class="nav-link">Volunteers</a>
    <a href="/admininventory" class="nav-link">Inventory</a>
    <a href="/adminevents" class="nav-link">Events</a>
    <!-- Add more links here as needed -->
</div>

@if (AddVolunteerHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Add Volunteer</h3>
            <div class="form-group">
                <label for="name" class="bold-text">Name</label>
                <input id="name" @bind="addName" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="surname" class="bold-text">Surname</label>
                <input id="surname" @bind="addSurname" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="VolunteerDate" class="bold-text">Volunteer Date</label>
                <input id="VolunteerDate" @bind="addVolunteerDate" type="date" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="PhoneNumber" class="bold-text">Phone Number</label>
                <input id="PhoneNumber" @bind="addPhoneNumber" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="Email" class="bold-text">Email</label>
                <input id="Email" @bind="addEmail" class="form-control rounded-input" />
            </div>
            <button type="submit" @onclick="AddVolunteer" class="btn btn-primary rounded-button bold-text">Add</button>
        </div>
    </div>
}
@if (EditVolunteerHtml && !AddVolunteerHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Add Volunteer</h3>
            <div class="form-group">
                <label for="name" class="bold-text">Name</label>
                <input id="name" @bind="editName" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="surname" class="bold-text">Surname</label>
                <input id="surname" @bind="editSurname" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="VolunteerDate" class="bold-text">Volunteer Date</label>
                <input id="VolunteerDate" @bind="editVolunteerDate" type="date" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="PhoneNumber" class="bold-text">Phone Number</label>
                <input id="PhoneNumber" @bind="editPhoneNumber" class="form-control rounded-input" />
            </div>
            <div class="form-group">
                <label for="Email" class="bold-text">Email</label>
                <input id="Email" @bind="editEmail" class="form-control rounded-input" />
            </div>

            <button type="submit" @onclick="EditVolunteer" class="btn btn-primary rounded-button bold-text">Edit</button>
        </div>
    </div>
}
@if (DeleteVolunteerHtml && !AddVolunteerHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Delete Volunteer</h3>
            <p><b>Are you sure you want to delete this Volunteer?</b></p>

            <button type="submit" @onclick="DeleteVolunteer" class="btn btn-primary rounded-button bold-text">Delete</button>
        </div>
    </div>
}
@if (!AddVolunteerHtml && !EditVolunteerHtml && !DeleteVolunteerHtml)
{
    <div class="top">
        <div>
            <center><h3 style="color: white;">Volunteers</h3></center>
            <center><input type="text" placeholder="Search..." class="desktop-search-bar"></center>
            <center><button class="btn btnx btn-primary rounded-button bold-text" @onclick="AddVolunteerForm">Add Volunteer</button></center>
        </div>
    </div>

    <div style="padding-left: 16px"></div>

    <div class="tbl-pets">
        <table class="table-style">
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Volunteer Date</th>
                <th>PhoneNumber</th>
                <th>Email</th>

                <th></th>
            </tr>
            @foreach (var vol in volunteers)
            {
                <tr>
                    <td>@vol.Name</td>
                    <td>@vol.Surname</td>
                    <td>@vol.VolunteerDate</td>
                    <td>@vol.PhoneNumber</td>
                    <td>@vol.Email</td>
                
                <td>
                    <center>
                        <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => DeleteVolunteerForm(vol)">Delete</button>
                        <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => EditVolunteerForm(vol)">Edit</button>
                    </center>
                </td>
            </tr>
            }
        </table>
    </div>
}

@code {
    public class Volunteer
    {
        public string VolunteerId { get; set; }
        public string Name { get; set; }
        public string Surname { get; set; }
        public string VolunteerDate { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }

    }
    bool AddVolunteerHtml = false;
    bool EditVolunteerHtml = false;
    bool DeleteVolunteerHtml = false;

    string addName = string.Empty;
    string addSurname = string.Empty;
    DateTime addVolunteerDate = DateTime.Now;
    string addPhoneNumber = string.Empty;
    string addEmail = string.Empty;

    string editName = string.Empty;
    string editSurname = string.Empty;
    DateTime editVolunteerDate = DateTime.Now;
    string editPhoneNumber = string.Empty;
    string editEmail = string.Empty;
    private string? errorMessage = null;

    Volunteer editVolunteer = new Volunteer();
    Volunteer deleteVolunteer = new Volunteer();
    List<Volunteer> volunteers = new List<Volunteer>();
    List<Volunteer> backupVolunteer = new List<Volunteer>();

    private void AddVolunteerForm(MouseEventArgs e)
    {
        AddVolunteerHtml = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var usertype = await LocalStorage.GetItemAsync<string>("userType");
        await LoadVolunteers();
    }

    private async Task LoadVolunteers()
    {
        // Load events based on the selected date (placeholder logic)
        volunteers = await Http.GetFromJsonAsync<List<Volunteer>>("https://spcaapi.azurewebsites.net/api/Volunteer/GetVolunteers");
    }

    private async Task AddVolunteer(MouseEventArgs e)
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(addName), "Name");
        content.Add(new StringContent(addSurname), "Surname");
        content.Add(new StringContent(addVolunteerDate.ToString()), "VolunteerDate");
        content.Add(new StringContent(addPhoneNumber), "PhoneNumber");
        content.Add(new StringContent(addEmail), "Email");
        // Post report to external API
        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/Volunteer/AddVolunteer", content);
        if (response.IsSuccessStatusCode)
        {
            // Reset the form and state after submission
            Navigation.NavigateTo("/AdminVolunteers", true);
            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to add volunteer";
        }
    }
    // Still need to add edit and delete forms

    private void EditVolunteerForm(Volunteer vol)
    {
        EditVolunteerHtml = true;
        editVolunteer = vol;
        editEmail = vol.Email;
        editName = vol.Name;
        editPhoneNumber = vol.PhoneNumber;
        editVolunteerDate = DateTime.Parse(vol.VolunteerDate);
        editSurname = vol.Surname;
        StateHasChanged();
    }
    private void DeleteVolunteerForm(Volunteer vol)
    {
        DeleteVolunteerHtml = true;
        deleteVolunteer = vol;
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Navigation.NavigateTo("/welcome");
    }

    private async Task EditVolunteer(MouseEventArgs e)
    {
        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(editName), "Name");
        content.Add(new StringContent(editSurname), "Surname");
        content.Add(new StringContent(editVolunteerDate.ToString()), "VolunteerDate");
        content.Add(new StringContent(editPhoneNumber), "PhoneNumber");
        content.Add(new StringContent(editEmail), "Email");

        // make request
        var response = await Http.PutAsync($"https://spcaapi.azurewebsites.net/api/Volunteer/UpdateVolunteer/" + editVolunteer.VolunteerId, content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminVolunteers", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
        StateHasChanged();
    }
    private async Task DeleteVolunteer(MouseEventArgs e)
    {
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/Volunteer/DeleteVolunteer/" + deleteVolunteer.VolunteerId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminVolunteers", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
    }
}


<style>
    .top {
        margin: 30px;
    }

    table {
        width: 100%;
    }

    th, td {
        border: 1px solid black;
        border-collapse: collapse;
        background-color: white;
        padding: 10px;
    }

    .table-style {
        width: 100%;
        border-collapse: separate;
        background-color: white;
        border-radius: 12px;
        border: 1px solid black;
        overflow: hidden;
        border-spacing: 0;
        margin-bottom: 10px;
    }

    .login-form {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1rem;
        width: 100%;
    }

    .rounded-input {
        border-radius: 15px;
        width: 100%;
    }

    .rounded-button {
        border-radius: 15px;
        width: 100%;
    }

    .bold-text {
        font-weight: bold;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .btn {
        display: inline-block;
        font-weight: 400;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        user-select: none;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
    }

    .btnx {
        width: fit-content;
        margin-top: 10px;
    }
    /* Side Navbar Styles */
    .side-navbar {
        height: 100%;
        width: 250px;
        position: fixed;
        top: 0;
        left: -250px; /* Initially hidden */
        background-color: #007BFF; /* Blue background for navbar */
        color: white;
        overflow-x: hidden;
        transition: 0.3s; /* Smooth transition for opening and closing */
        padding-top: 60px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
    }

        .side-navbar .nav-link {
            padding: 10px 15px;
            text-decoration: none;
            font-size: 1.2em;
            color: white;
            display: block;
            transition: 0.3s;
        }

            .side-navbar .nav-link:hover {
                background-color: #0056b3; /* Darker blue for hover effect */
            }

        .side-navbar .close-btn {
            position: absolute;
            top: 10px;
            right: 25px;
            font-size: 36px;
            margin-left: 50px;
        }

        /* Show the side navbar when it is active */
        .side-navbar.active {
            left: 0;
        }
</style>

<script>
    function openNav() {
        document.getElementById("sideNavbar").classList.add("active");
    }

    function closeNav() {
        document.getElementById("sideNavbar").classList.remove("active");
    }
</script>

