@page "/AdminVolunteers"
@inject NavigationManager Navigation
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Volunteer Managements</PageTitle>
<a href="/desktophome" class="open-nav-btn" onclick="openNav()">Home</a>

@if (AddVolunteerHtml)
{
    <div class="form-container">
        <div class="form-card">
            <h3 class="form-title">Add Volunteer</h3>
            <div class="form-group">
                <label for="name" class="form-label">Name</label>
                <input id="name" @bind="addName" class="form-input" />
            </div>
            <div class="form-group">
                <label for="surname" class="form-label">Surname</label>
                <input id="surname" @bind="addSurname" class="form-input" />
            </div>
            <div class="form-group">
                <label for="VolunteerDate" class="form-label">Volunteer Date</label>
                <input id="VolunteerDate" @bind="addVolunteerDate" type="date" class="form-input" />
            </div>
            <div class="form-group">
                <label for="PhoneNumber" class="form-label">Phone Number</label>
                <input id="PhoneNumber" @bind="addPhoneNumber" class="form-input" />
            </div>
            <div class="form-group">
                <label for="Email" class="form-label">Email</label>
                <input id="Email" @bind="addEmail" type="email" class="form-input" />
            </div>
            <button type="submit" @onclick="AddVolunteer" class="btn btn-primary btn-submit">Add</button>
            <button type="submit" @onclick="Cancel" class="btn btnx btn-danger rounded-button bold-text">Cancel</button>
        </div>
    </div>
}

@if (EditVolunteerHtml && !AddVolunteerHtml)
{
    <div class="form-container">
        <div class="form-card">
            <h3 class="form-title">Edit Volunteer</h3>
            <div class="form-group">
                <label for="name" class="form-label">Name</label>
                <input id="name" @bind="editName" class="form-input" />
            </div>
            <div class="form-group">
                <label for="surname" class="form-label">Surname</label>
                <input id="surname" @bind="editSurname" class="form-input" />
            </div>
            <div class="form-group">
                <label for="VolunteerDate" class="form-label">Volunteer Date</label>
                <input id="VolunteerDate" @bind="editVolunteerDate" type="date" class="form-input" />
            </div>
            <div class="form-group">
                <label for="PhoneNumber" class="form-label">Phone Number</label>
                <input id="PhoneNumber" @bind="editPhoneNumber" class="form-input" />
            </div>
            <div class="form-group">
                <label for="Email" class="form-label">Email</label>
                <input id="Email" @bind="editEmail" type="email" class="form-input" />
            </div>
            <button type="submit" @onclick="EditVolunteer" class="btn btn-primary btn-submit">Edit</button>
            <button type="submit" @onclick="Cancel" class="btn btnx btn-danger rounded-button bold-text">Cancel</button>
        </div>
    </div>
}

@if (DeleteVolunteerHtml && !AddVolunteerHtml)
{
    <div class="login-container">
        <div class="login-form">
            <h3 class="bold-text">Delete Volunteer</h3>
            <p><b>Are you sure you want to delete this Volunteer?</b></p>
            <button type="submit" @onclick="DeleteVolunteer" class="btn btn-danger btn-submit">Delete</button>
            <button type="submit" @onclick="Cancel" class="btn btnx btn-primary btn-submit">Cancel</button>
        </div>
    </div>
}

@if (!AddVolunteerHtml && !EditVolunteerHtml && !DeleteVolunteerHtml)
{
    <div class="top">
        <h3 class="page-title">Volunteers</h3>
        <input type="text" @oninput="search" placeholder="Search..." class="desktop-search-bar">
        <button class="search-button">Search</button>
        <button class="btn btnx btn-primary rounded-button bold-text" @onclick="AddVolunteerForm">Add Volunteer</button>
    </div>
    <div class="tbl-pets">
        <table class="table-style">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Surname</th>
                    <th>Volunteer Date</th>
                    <th>Phone Number</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var vol in volunteers)
                {
                    <tr>
                        <td>@vol.Name</td>
                        <td>@vol.Surname</td>
                        <td>@vol.VolunteerDate</td>
                        <td>@vol.PhoneNumber</td>
                        <td>@vol.Email</td>
                        <td>
                            <center>
                                <button class="btn btnx btn-primary rounded-button bold-text" @onclick="() => EditVolunteerForm(vol)">Edit</button>
                                <button class="btn btnx btn-danger rounded-button bold-text" @onclick="() => DeleteVolunteerForm(vol)">Delete</button>
                            </center>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    public class Volunteer
    {
        public string VolunteerId { get; set; }
        public string Name { get; set; }
        public string Surname { get; set; }
        public string VolunteerDate { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }

    }
    bool AddVolunteerHtml = false;
    bool EditVolunteerHtml = false;
    bool DeleteVolunteerHtml = false;

    string addName = string.Empty;
    string addSurname = string.Empty;
    DateOnly addVolunteerDate = DateOnly.FromDateTime(DateTime.Now);
    string addPhoneNumber = string.Empty;
    string addEmail = string.Empty;

    string editName = string.Empty;
    string editSurname = string.Empty;
    DateOnly editVolunteerDate = DateOnly.FromDateTime(DateTime.Now);
    string editPhoneNumber = string.Empty;
    string editEmail = string.Empty;
    private string? errorMessage = null;

    Volunteer editVolunteer = new Volunteer();
    Volunteer deleteVolunteer = new Volunteer();
    List<Volunteer> volunteers = new List<Volunteer>();
    List<Volunteer> backupVolunteer = new List<Volunteer>();

    private void AddVolunteerForm(MouseEventArgs e)
    {
        AddVolunteerHtml = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var usertype = await LocalStorage.GetItemAsync<string>("userType");
        await LoadVolunteers();
    }

    private async Task LoadVolunteers()
    {
        // Load events based on the selected date (placeholder logic)
        volunteers = await Http.GetFromJsonAsync<List<Volunteer>>("https://spcaapi.azurewebsites.net/api/Volunteer/GetVolunteers");
        backupVolunteer = volunteers;
    }

    private void Cancel(MouseEventArgs e)
    {
        AddVolunteerHtml = false;
        EditVolunteerHtml = false;
        DeleteVolunteerHtml = false;
        StateHasChanged();
    }

    private async Task AddVolunteer(MouseEventArgs e)
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(addName), "Name");
        content.Add(new StringContent(addSurname), "Surname");
        content.Add(new StringContent(addVolunteerDate.ToString()), "VolunteerDate");
        content.Add(new StringContent(addPhoneNumber), "PhoneNumber");
        content.Add(new StringContent(addEmail), "Email");
        // Post report to external API
        var response = await Http.PostAsync("https://spcaapi.azurewebsites.net/api/Volunteer/AddVolunteer", content);
        if (response.IsSuccessStatusCode)
        {
            // Reset the form and state after submission
            Navigation.NavigateTo("/AdminVolunteers", true);
            StateHasChanged();
        }
        else
        {
            errorMessage = "Failed to add volunteer";
        }
    }
    // Still need to add edit and delete forms

    private void EditVolunteerForm(Volunteer vol)
    {
        EditVolunteerHtml = true;
        editVolunteer = vol;
        editEmail = vol.Email;
        editName = vol.Name;
        editPhoneNumber = vol.PhoneNumber;
        editVolunteerDate = DateOnly.Parse(vol.VolunteerDate);
        editSurname = vol.Surname;
        StateHasChanged();
    }
    private void DeleteVolunteerForm(Volunteer vol)
    {
        DeleteVolunteerHtml = true;
        deleteVolunteer = vol;
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        Navigation.NavigateTo("/welcome");
    }

    private async Task EditVolunteer(MouseEventArgs e)
    {
        // make content for post request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(editName), "Name");
        content.Add(new StringContent(editSurname), "Surname");
        content.Add(new StringContent(editVolunteerDate.ToString()), "VolunteerDate");
        content.Add(new StringContent(editPhoneNumber), "PhoneNumber");
        content.Add(new StringContent(editEmail), "Email");

        // make request
        var response = await Http.PutAsync($"https://spcaapi.azurewebsites.net/api/Volunteer/UpdateVolunteer/" + editVolunteer.VolunteerId, content);

        // if/else get reponse
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminVolunteers", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("Error adding pet: " + response.ReasonPhrase);
        }
        StateHasChanged();
    }
    private async Task DeleteVolunteer(MouseEventArgs e)
    {
        var response = await Http.DeleteAsync("https://spcaapi.azurewebsites.net/api/Volunteer/DeleteVolunteer/" + deleteVolunteer.VolunteerId);

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/AdminVolunteers", true);
            StateHasChanged();
        }
        else
        {
            Console.WriteLine(response.ReasonPhrase);
        }
    }
    private void search(ChangeEventArgs e)
    {
        var searchText = e.Value.ToString()?.Trim().ToLower() ?? string.Empty;
        if (!string.IsNullOrEmpty(searchText))
        {
            volunteers = backupVolunteer.Where(vol => vol.Name.ToLower().Contains(searchText)).ToList();
        }
        else
        {
            volunteers = new List<Volunteer>(backupVolunteer);
        }
        StateHasChanged();
    }
}
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
        color: #333;
    }


    .top {
        margin: 30px;
        text-align: center;
    }

    .page-title {
        color: #143963;
        margin-bottom: 20px;
        font-size: 60px;
    }

    .desktop-search-bar {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 80%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .tbl-pets {
        padding: 0 16px;
    }

    .table-style {
        width: 100%;
        border-collapse: collapse;
        border-radius: 12px;
        margin-bottom: 20px;
        overflow: hidden;
    }

    th, td {
        padding: 10px;
        text-align: left;
        border: 1px solid #ddd;
    }

    th {
        background-color: #143963;
        color: white;
    }

    .form-container {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }

    .login-form {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        text-align: center;
    }

    .form-card {
        background: #ffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 300px;
        text-align: center;
    }

    .form-title {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
        width: 100%;
    }

    .form-label {
        margin-bottom: 5px;
        font-weight: bold;
    }

    .form-input {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 15px;
    }

    .btnx {
        margin-top: 5px;
        margin-bottom: 5px;
        padding: 10px 20px;
        cursor: pointer;
    }

    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        width: 50%;
        font-size: 16px;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

    .btn-primary {
        background-color: #143963;
        color: white;
        border: 1px solid #143963;
    }

        .btn-primary:hover {
            background-color: white;
            color: #143963;
            border-color: #143963;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: 1px solid #dc3545;
        margin-right: 5px;
    }

        .btn-danger:hover {
            border-color: #8a1212;
            color: #fff;
        }

    .btn-edit {
        background-color: #28a745;
        color: white;
        border: 1px solid #28a745;
        margin-right: 5px;
    }

        .btn-edit:hover {
            background-color: #218838;
            color: white;
        }



    .btn-add {
        background-color: #ffffff;
        color: #143963;
        border: 1px solid #143963;
        margin-top: 10px;
    }

        .btn-add:hover {
            background-color: #e0e0e0;
            color: #143963;
        }
    .desktop-search-bar {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 80%;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .search-button {
        padding: 8px 15px;
        margin-left: 10px;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        background-color: #143963;
        color: #fff;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease;
    }

        .search-button:hover {
            background-color: #fff;
            color: #143963;
        }

</style>

